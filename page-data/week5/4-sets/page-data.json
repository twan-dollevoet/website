{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week5/4-sets","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You are familiar with the Set interface and the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"SortedSet"}]},{"type":"text","value":" interface."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You are aware of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"text","value":" classes and have a general idea how they speed up containment queries"}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Set<E> interface"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes, we want to work with data while we do not care about the order elements were added or how often they occur.\nIn such cases, we should use a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" instead of a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":". The Set interface describes functionality related to sets,\nsimilar to the concept of a set in mathematics. That means that a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" either contains or does not contain an\nobject/element, but that these elements are not organized sequentially, or that it is possible to have multiple copies\nof the same element/object in the set. In Java "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" objects, duplicate element are filtered using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals"}]},{"type":"text","value":" method.\nFor example, when finding repeated values in a set of data or when keeping track of whether we have seen something before,\na "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" is very useful, as adding multiple objects that are equal according to their "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals"}]},{"type":"text","value":" implementation will make\nsure only a single one of them is contained in the set."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Set data structures are thus different from lists. They specialize in checking efficiently whether an element is in the\nset, without any notion of position or indices on these elements."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set<E>"}]},{"type":"text","value":" interface extends the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection<E>"}]},{"type":"text","value":" interface, but does not add any methods on top of it.\nThe semantics, i.e. meaning, of a class that implements the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" interface is that there are no repeated values.\nSince a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" behaves differently from a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", we can interpret some operations in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection<E>"}]},{"type":"text","value":" interface\nas operations on mathematical sets:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The set union (ùëÜ ‚à™ ùëá) can be performed via the addAll method: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public boolean addAll(Collection<? extends E> arg0);"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The set intersection (ùëÜ ‚à© ùëá) can be performed via the retainAll method: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public boolean retainAll(Collection<?> arg0);"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The set difference (S \\ ùëá) can be performed via the removeAll method: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public boolean removeAll(Collection<?> arg0);"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Checking for subsets (S ‚äÜ ùëá) can be done via the containsAll method: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public boolean containsAll(Collection<?> arg0);"}]}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since sets do not have a notion of the position or sequence, it is not possible to iterate over the elements of the\nset via indices. Here's how to go through the elements of a set."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Set"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" set "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\nset"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"one\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\nset"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"one\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\nset"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"two\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" element"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" set"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"element"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"sample-output","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"one\ntwo"}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"hint","name":"Use the for-each loop"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this course we encourage you to use the for-each loop when you can.\nConsider the following snippet:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":" obj "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" col"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"obj"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This snippet will work whether "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"col"}]},{"type":"text","value":" is a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" or even another\ntype of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":". It is thus an extremely general pattern."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is contrary to the following snippet:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" i"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":" col"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"size"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" i"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"col"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"get"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This snippet only works if "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"col"}]},{"type":"text","value":" is a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", but will fail when "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"col"}]},{"type":"text","value":" is a\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" or even an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":". Thus, if you are required to write\ncode that iterates through all elements on an exam, you are always safe with\nthe for-each loop (assuming you do not need an index), but you would make a\nsevere mistake if you use the index-based loop on anything else than a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":"."}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that Set does not assume or guarantee anything about the order of a set of elements.\nA "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" only knows which elements are contained in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":", and which elements are\nnot.\nIf you iterate over a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":", the elements may show up in a completely different order\nthan the order in which you added them, and for some types of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" it maybe even\nseem different every time you run your program. This is very different from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":"\nobjects, where the order of the elements is dictated by their "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"indices"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"HashSet<E> class"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As an example, the set interface is implemented by "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":". In order to check if an element is already in the set, you could iterate over all elements in the set.\nHowever, this require a lot of work, as in the worst case all elements in the set have to be checked, which can become very slow for large datasets.\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet<E>"}]},{"type":"text","value":" class will be much more efficient by clever use of the contract between "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals()"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hashCode()"}]},{"type":"text","value":" by making sure only a small number of elements\nneed to be considered and compared."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The basic idea is that the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":"maintains a list of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"m"}]},{"type":"text","value":" buckets.\nWhen a new element "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"o"}]},{"type":"text","value":" is added, it is added to the bucket with index "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"o.hashCode() % m"}]},{"type":"text","value":".\nWhen we check whether an element is already in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":", we only need to compare the element to other elements in its bucket.\nRemember that if two objects are equal according to their "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals"}]},{"type":"text","value":" method, it must be the case that their "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hashCode"}]},{"type":"text","value":" is equal.\nAs a result, the bucket with the same index will be used when two objects are equal according to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals"}]},{"type":"text","value":", and we know for\nsure that objects stored in the other buckets can never be equal according to their "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals"}]},{"type":"text","value":" methods, assuming they respect\nthe rules in the contract between "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hashCode"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is a visual example from the slides that shows how a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" with six objects is organized in the memory:"}]},{"type":"element","tagName":"img","properties":{"width":683,"alt":"In the picture six buckets are depicted. Object 1 and 4 are in the first bucket, having the same Hash. Object 1 contains string aab and object 4 contains aabaab. The other buckets either contain one or zero objects, with all different hash codes and (slightly) different string elements.","src":"https://user-images.githubusercontent.com/67587903/128778160-0cd013d4-b381-441c-b1ff-8e29799d03e8.PNG"},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" class has the following two constructors:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" c"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the hash codes of the objects added to a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" are distributed uniformly, they will distribute nicely over the different buckets with high probability, and it will be very efficient. To work properly, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" really depends on the contracts for "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hashCode()"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals()"}]},{"type":"text","value":". Calling the contains() method on a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" with a 10,000 elements will be a lot faster than calling it on a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", approximately 100 to 1,000 times faster."}]},{"type":"element","tagName":"text-box","properties":{"variant":"hint","name":"Use a LinkedHashSet"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"While a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" is usually quite efficient, the disadvantage is that the order of the elements may appear to change each time you re-run your program (although this depends a bit on the implementation of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hashCode"}]},{"type":"text","value":" in the objects your add).\nAs an alternative, you can use the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"LinkedHashSet"}]},{"type":"text","value":", which internally maintains both a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" that allows checking for quick containment, and a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"LinkedList"}]},{"type":"text","value":" that keeps track of the order in which elements were added to the set.\nThe main convenience is that when you iterate through the elements in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"LinkedHashSet"}]},{"type":"text","value":", the order in which they were originally inserted is used rather than the random order in which the elements appear in the various buckets."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"LinkedHashSet"}]},{"type":"text","value":" is a drop-in replacement for the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":". In you use the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" type to declare your variables, it is typically a matter of replacing a call to the constructor of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" with a call to the\nconstructor of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"LinkedHashSet"}]},{"type":"text","value":". For example, the following example always ensures that the Strings"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"\"Hello\""}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"\"World!\""}]},{"type":"text","value":" are always printed in that order."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Set"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" set "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"LinkedHashSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\nset"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Hello\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\nset"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"World!\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" str "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" set"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"str"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This will always print "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Hello"}]},{"type":"text","value":" first and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"World!"}]},{"type":"text","value":" second, while this is not guaranteed with a regular "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":"."}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"SortedSet<E> interface"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet<E>"}]},{"type":"text","value":" stores its elements in a more or less random order, depending on the current number of buckets and the hashCodes of the objects.\nIf there is some order available, as defined by an implementation of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparable"}]},{"type":"text","value":" interface (natural order) or the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparator"}]},{"type":"text","value":" interface,\nwe may want to obtain the minimum or maximum element, a subset of all objects in the set greater than some object "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fromElement"}]},{"type":"text","value":" or a subset smaller than some object "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toElement"}]},{"type":"text","value":".\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"SortedSet<E>"}]},{"type":"text","value":" interface is a sub-interface of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" that defines the following additional methods:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"first"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"last"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SortedSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"headSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"text","value":" toElement"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SortedSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"tailSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"text","value":" fromElement"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SortedSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"subSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"text","value":" fromElement"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"text","value":" toElement"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" interface only implements the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" interface, but not the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"SortedSet"}]},{"type":"text","value":" interface, these methods are not available on a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":".\nHowever, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" is not the only "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" offered in the Collections framework."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"TreeSet<E> class"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet<E>"}]},{"type":"text","value":" implements the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"SortedSet<E>"}]},{"type":"text","value":" interface and requires some order of the elements of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"E"}]},{"type":"text","value":". This can be the natural order, if E implements "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparable<E>"}]},{"type":"text","value":", or it can be provided by passing a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparator<E>"}]},{"type":"text","value":" to the constructor.\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"text","value":" stores its elements in the nodes of a binary tree, such that the following properties hold at all time:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All nodes in the left subtree of the node hold smaller elements"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All nodes in the right subtree of the node hold greater elements"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The advantage of this way to organize the data is that if the tree is balanced, i.e. for each node the subtree on its left side contains roughly as many nodes as the subtree on its right side, in every step half of the remaining elements\nin the tree can be ignored. The number of steps needed to detect if an element is present or not then becomes the base-2 logarithm of the number of elements stored in the tree.\nThis results in a huge speed up: searching a balanced tree of a million element requires that we only check 20 elements. While these details are beyond the scope of this course, clever tricks exist to make sure that the tree will be\nkept relatively balanced when elements are inserted or removed."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Below is an example of how a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"text","value":" could organize seven integer values in the computer's memory with this approach. In practice, the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"value"}]},{"type":"text","value":" variable in each node would be a reference to some object,\nwhich is then compare using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparable"}]},{"type":"text","value":"/"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparator"}]},{"type":"text","value":" implementation."}]},{"type":"element","tagName":"img","properties":{"width":724,"alt":"The TreeSet<Integer%gt; object contains the reference to the root node of the TreeSet and an integer value of the size. A node has a pointer to a node object with a smaller value, a pointer to a node object with a greater value and a pointer to the integer value of the node itself. In this example, the root node has two children and they also have two children each. If you go to the left from one node, you obtain node objects with smaller values. On the right, however, are nodes with greater values.","src":"https://user-images.githubusercontent.com/67587903/128865316-5ff48ad7-eb80-409d-a9c6-eb7b4fc79421.PNG"},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet<E>"}]},{"type":"text","value":" class has the advantage that iterating over the elements happens according to the specified order, and that minimum/maximum elements and ranged subsets can be selected efficiently.\nHowever, in practice, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" is faster (unless you end up in the very unlikely case that all objects end up in the same bucket). However, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":"s have random order, while a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"text","value":" has a reliable order,\nas defined by the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparable"}]},{"type":"text","value":"/"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparator"}]},{"type":"text","value":" used by the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"text","value":". Therefore, iterating over a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet<String>"}]},{"type":"text","value":" would return all the elements in an alphabetical order, regardless of the order in which the elements\nwere inserted. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"text","value":" does require the order defined in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"compareTo"}]},{"type":"text","value":"/"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"compare"}]},{"type":"text","value":" methods to be consistent with equals in order to work correctly."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Three of TreeSet‚Äôs constructors are:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Comparator"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"super"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" comparator"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" c"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You are familiar with the Set interface and the <code class=\"language-text\">SortedSet</code> interface.</li>\n<li>You are aware of the <code class=\"language-text\">HashSet</code> and <code class=\"language-text\">TreeSet</code> classes and have a general idea how they speed up containment queries</li>\n</ul></text-box><h2>Set&#x3C;E> interface</h2><p>Sometimes, we want to work with data while we do not care about the order elements were added or how often they occur.\nIn such cases, we should use a <code class=\"language-text\">Set</code> instead of a <code class=\"language-text\">List</code>. The Set interface describes functionality related to sets,\nsimilar to the concept of a set in mathematics. That means that a <code class=\"language-text\">Set</code> either contains or does not contain an\nobject/element, but that these elements are not organized sequentially, or that it is possible to have multiple copies\nof the same element/object in the set. In Java <code class=\"language-text\">Set</code> objects, duplicate element are filtered using the <code class=\"language-text\">equals</code> method.\nFor example, when finding repeated values in a set of data or when keeping track of whether we have seen something before,\na <code class=\"language-text\">Set</code> is very useful, as adding multiple objects that are equal according to their <code class=\"language-text\">equals</code> implementation will make\nsure only a single one of them is contained in the set.</p><p>Set data structures are thus different from lists. They specialize in checking efficiently whether an element is in the\nset, without any notion of position or indices on these elements.</p><p>The <code class=\"language-text\">Set&lt;E&gt;</code> interface extends the <code class=\"language-text\">Collection&lt;E&gt;</code> interface, but does not add any methods on top of it.\nThe semantics, i.e. meaning, of a class that implements the <code class=\"language-text\">Set</code> interface is that there are no repeated values.\nSince a <code class=\"language-text\">Set</code> behaves differently from a <code class=\"language-text\">List</code>, we can interpret some operations in the <code class=\"language-text\">Collection&lt;E&gt;</code> interface\nas operations on mathematical sets:</p><ul>\n<li>The set union (ùëÜ ‚à™ ùëá) can be performed via the addAll method: <code class=\"language-text\">public boolean addAll(Collection&lt;? extends E&gt; arg0);</code></li>\n<li>The set intersection (ùëÜ ‚à© ùëá) can be performed via the retainAll method: <code class=\"language-text\">public boolean retainAll(Collection&lt;?&gt; arg0);</code></li>\n<li>The set difference (S \\ ùëá) can be performed via the removeAll method: <code class=\"language-text\">public boolean removeAll(Collection&lt;?&gt; arg0);</code></li>\n<li>Checking for subsets (S ‚äÜ ùëá) can be done via the containsAll method: <code class=\"language-text\">public boolean containsAll(Collection&lt;?&gt; arg0);</code></li>\n</ul><p>Since sets do not have a notion of the position or sequence, it is not possible to iterate over the elements of the\nset via indices. Here's how to go through the elements of a set.</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> element<span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><sample-output><p>one\ntwo</p></sample-output><text-box variant='hint' name='Use the for-each loop'><p>In this course we encourage you to use the for-each loop when you can.\nConsider the following snippet:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj <span class=\"token operator\">:</span> col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>This snippet will work whether <code class=\"language-text\">col</code> is a <code class=\"language-text\">List</code>, a <code class=\"language-text\">Set</code> or even another\ntype of <code class=\"language-text\">Collection</code> or <code class=\"language-text\">Iterable</code>. It is thus an extremely general pattern.</p><p>This is contrary to the following snippet:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> col<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>This snippet only works if <code class=\"language-text\">col</code> is a <code class=\"language-text\">List</code>, but will fail when <code class=\"language-text\">col</code> is a\n<code class=\"language-text\">Set</code>, <code class=\"language-text\">Collection</code> or even an <code class=\"language-text\">Iterable</code>. Thus, if you are required to write\ncode that iterates through all elements on an exam, you are always safe with\nthe for-each loop (assuming you do not need an index), but you would make a\nsevere mistake if you use the index-based loop on anything else than a <code class=\"language-text\">List</code>.</p></text-box><p>Note that Set does not assume or guarantee anything about the order of a set of elements.\nA <code class=\"language-text\">Set</code> only knows which elements are contained in the <code class=\"language-text\">Set</code>, and which elements are\nnot.\nIf you iterate over a <code class=\"language-text\">Set</code>, the elements may show up in a completely different order\nthan the order in which you added them, and for some types of <code class=\"language-text\">Set</code> it maybe even\nseem different every time you run your program. This is very different from <code class=\"language-text\">List</code>\nobjects, where the order of the elements is dictated by their <em>indices</em>.</p><h3>HashSet&#x3C;E> class</h3><p>As an example, the set interface is implemented by <code class=\"language-text\">HashSet</code>. In order to check if an element is already in the set, you could iterate over all elements in the set.\nHowever, this require a lot of work, as in the worst case all elements in the set have to be checked, which can become very slow for large datasets.\nThe <code class=\"language-text\">HashSet&lt;E&gt;</code> class will be much more efficient by clever use of the contract between <code class=\"language-text\">equals()</code> and <code class=\"language-text\">hashCode()</code> by making sure only a small number of elements\nneed to be considered and compared.</p><p>The basic idea is that the <code class=\"language-text\">HashSet</code>maintains a list of <em>m</em> buckets.\nWhen a new element <em>o</em> is added, it is added to the bucket with index <code class=\"language-text\">o.hashCode() % m</code>.\nWhen we check whether an element is already in the <code class=\"language-text\">Set</code>, we only need to compare the element to other elements in its bucket.\nRemember that if two objects are equal according to their <code class=\"language-text\">equals</code> method, it must be the case that their <code class=\"language-text\">hashCode</code> is equal.\nAs a result, the bucket with the same index will be used when two objects are equal according to <code class=\"language-text\">equals</code>, and we know for\nsure that objects stored in the other buckets can never be equal according to their <code class=\"language-text\">equals</code> methods, assuming they respect\nthe rules in the contract between <code class=\"language-text\">equals</code> and <code class=\"language-text\">hashCode</code>.</p><p>Here is a visual example from the slides that shows how a <code class=\"language-text\">HashSet</code> with six objects is organized in the memory:</p><img width=\"683\" alt=\"In the picture six buckets are depicted. Object 1 and 4 are in the first bucket, having the same Hash. Object 1 contains string aab and object 4 contains aabaab. The other buckets either contain one or zero objects, with all different hash codes and (slightly) different string elements.\" src=\"https://user-images.githubusercontent.com/67587903/128778160-0cd013d4-b381-441c-b1ff-8e29799d03e8.PNG\"><p>The <code class=\"language-text\">HashSet</code> class has the following two constructors:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span></code></pre></div><p>If the hash codes of the objects added to a <code class=\"language-text\">HashSet</code> are distributed uniformly, they will distribute nicely over the different buckets with high probability, and it will be very efficient. To work properly, <code class=\"language-text\">HashSet</code> really depends on the contracts for <code class=\"language-text\">hashCode()</code> and <code class=\"language-text\">equals()</code>. Calling the contains() method on a <code class=\"language-text\">HashSet</code> with a 10,000 elements will be a lot faster than calling it on a <code class=\"language-text\">List</code>, approximately 100 to 1,000 times faster.</p><text-box variant='hint' name='Use a LinkedHashSet'><p>While a <code class=\"language-text\">HashSet</code> is usually quite efficient, the disadvantage is that the order of the elements may appear to change each time you re-run your program (although this depends a bit on the implementation of <code class=\"language-text\">hashCode</code> in the objects your add).\nAs an alternative, you can use the <code class=\"language-text\">LinkedHashSet</code>, which internally maintains both a <code class=\"language-text\">HashSet</code> that allows checking for quick containment, and a <code class=\"language-text\">LinkedList</code> that keeps track of the order in which elements were added to the set.\nThe main convenience is that when you iterate through the elements in the <code class=\"language-text\">LinkedHashSet</code>, the order in which they were originally inserted is used rather than the random order in which the elements appear in the various buckets.</p><p>The <code class=\"language-text\">LinkedHashSet</code> is a drop-in replacement for the <code class=\"language-text\">HashSet</code>. In you use the <code class=\"language-text\">Set</code> type to declare your variables, it is typically a matter of replacing a call to the constructor of <code class=\"language-text\">HashSet</code> with a call to the\nconstructor of <code class=\"language-text\">LinkedHashSet</code>. For example, the following example always ensures that the Strings<code class=\"language-text\">&quot;Hello&quot;</code> and <code class=\"language-text\">&quot;World!&quot;</code> are always printed in that order.</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>This will always print <code class=\"language-text\">Hello</code> first and <code class=\"language-text\">World!</code> second, while this is not guaranteed with a regular <code class=\"language-text\">HashSet</code>.</p></text-box><h2>SortedSet&#x3C;E> interface</h2><p>The <code class=\"language-text\">HashSet&lt;E&gt;</code> stores its elements in a more or less random order, depending on the current number of buckets and the hashCodes of the objects.\nIf there is some order available, as defined by an implementation of the <code class=\"language-text\">Comparable</code> interface (natural order) or the <code class=\"language-text\">Comparator</code> interface,\nwe may want to obtain the minimum or maximum element, a subset of all objects in the set greater than some object <code class=\"language-text\">fromElement</code> or a subset smaller than some object <code class=\"language-text\">toElement</code>.\nThe <code class=\"language-text\">SortedSet&lt;E&gt;</code> interface is a sub-interface of <code class=\"language-text\">Set</code> that defines the following additional methods:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">E</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">E</span> <span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SortedSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">headSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> toElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SortedSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">tailSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> fromElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SortedSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">subSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> fromElement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> toElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>Since the <code class=\"language-text\">HashSet</code> interface only implements the <code class=\"language-text\">Set</code> interface, but not the <code class=\"language-text\">SortedSet</code> interface, these methods are not available on a <code class=\"language-text\">HashSet</code>.\nHowever, <code class=\"language-text\">HashSet</code> is not the only <code class=\"language-text\">Set</code> offered in the Collections framework.</p><h3>TreeSet&#x3C;E> class</h3><p><code class=\"language-text\">TreeSet&lt;E&gt;</code> implements the <code class=\"language-text\">SortedSet&lt;E&gt;</code> interface and requires some order of the elements of type <code class=\"language-text\">E</code>. This can be the natural order, if E implements <code class=\"language-text\">Comparable&lt;E&gt;</code>, or it can be provided by passing a <code class=\"language-text\">Comparator&lt;E&gt;</code> to the constructor.\nThe <code class=\"language-text\">TreeSet</code> stores its elements in the nodes of a binary tree, such that the following properties hold at all time:</p><ul>\n<li>All nodes in the left subtree of the node hold smaller elements</li>\n<li>All nodes in the right subtree of the node hold greater elements</li>\n</ul><p>The advantage of this way to organize the data is that if the tree is balanced, i.e. for each node the subtree on its left side contains roughly as many nodes as the subtree on its right side, in every step half of the remaining elements\nin the tree can be ignored. The number of steps needed to detect if an element is present or not then becomes the base-2 logarithm of the number of elements stored in the tree.\nThis results in a huge speed up: searching a balanced tree of a million element requires that we only check 20 elements. While these details are beyond the scope of this course, clever tricks exist to make sure that the tree will be\nkept relatively balanced when elements are inserted or removed.</p><p>Below is an example of how a <code class=\"language-text\">TreeSet</code> could organize seven integer values in the computer's memory with this approach. In practice, the <em>value</em> variable in each node would be a reference to some object,\nwhich is then compare using the <code class=\"language-text\">Comparable</code>/<code class=\"language-text\">Comparator</code> implementation.</p><img width=\"724\" alt=\"The TreeSet<Integer%gt; object contains the reference to the root node of the TreeSet and an integer value of the size. A node has a pointer to a node object with a smaller value, a pointer to a node object with a greater value and a pointer to the integer value of the node itself. In this example, the root node has two children and they also have two children each. If you go to the left from one node, you obtain node objects with smaller values. On the right, however, are nodes with greater values.\" src=\"https://user-images.githubusercontent.com/67587903/128865316-5ff48ad7-eb80-409d-a9c6-eb7b4fc79421.PNG\"><p>The <code class=\"language-text\">TreeSet&lt;E&gt;</code> class has the advantage that iterating over the elements happens according to the specified order, and that minimum/maximum elements and ranged subsets can be selected efficiently.\nHowever, in practice, <code class=\"language-text\">HashSet</code> is faster (unless you end up in the very unlikely case that all objects end up in the same bucket). However, <code class=\"language-text\">HashSet</code>s have random order, while a <code class=\"language-text\">TreeSet</code> has a reliable order,\nas defined by the <code class=\"language-text\">Comparable</code>/<code class=\"language-text\">Comparator</code> used by the <code class=\"language-text\">TreeSet</code>. Therefore, iterating over a <code class=\"language-text\">TreeSet&lt;String&gt;</code> would return all the elements in an alphabetical order, regardless of the order in which the elements\nwere inserted. <code class=\"language-text\">TreeSet</code> does require the order defined in the <code class=\"language-text\">compareTo</code>/<code class=\"language-text\">compare</code> methods to be consistent with equals in order to work correctly.</p><p>Three of TreeSet‚Äôs constructors are:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span></code></pre></div></div>","frontmatter":{"path":"/week5/4-sets","title":"Sets","ready":true,"extra":null}},"allPages":{"edges":[{"node":{"id":"6dec76aa-fb95-55a4-9d97-c4511f548775","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"6dbbb07f-d2a4-5469-83d8-515ec4da7185","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"401064e0-a39d-550c-92fc-2ef92c6b6668","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"ff3dc30f-0280-5a9c-99ec-c4d2a9b9b9a9","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"a6f621ab-f293-5245-bac0-6f4f2f5556a6","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"a3aa3a67-9479-5974-abe1-6e88980da077","frontmatter":{"path":"/sessions-and-support-old","title":"Sessions and support (old)"}}},{"node":{"id":"336ac971-5566-5c22-a38a-4d4805142dbf","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"5ab906eb-59ec-5d6a-ba6f-c576ba14b3a4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"a1b5795f-40bc-5d04-a5f2-2ac62924c710","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"11f90931-1d19-5a42-a2a5-02076112da75","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"33e23016-f724-5015-8601-ca09c6d06cda","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"94e1d4f2-55f9-5fd6-9511-84057bec1152","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"4394a890-ac32-5276-aecd-6dcff67e87a0","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"2b7fbfb2-0a29-5ed0-8d42-c4cdb2d5fba8","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"58141db4-25a9-5676-a678-92fe0ec5fd30","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"796b5033-974c-5f34-9e3f-2eb8448b7c79","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"e6bcfe98-dbcc-56a1-b383-7b1e85674ef4","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"9f6b1395-1fc7-5409-b994-94c06695727d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"cb772258-ee45-574c-b43c-7952b27dd32e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"c4c94c91-7ec1-5959-8e12-82b069c5062f","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"db7f8fa4-bc60-55e3-b4e8-c625e56aecb4","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"f1ae2ab3-1c89-5965-a529-b9a9f444450b","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"5144895c-b0d1-59f6-becf-c5a8434f7c2e","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"62d53c71-3ba1-56b3-9bb2-7a7eb55f404d","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"8e88219b-5338-5b7f-bc7d-0db1d73fee7a","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"4c71eeec-43b0-5cbb-bec8-bf59808a8b15","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"52b17ec4-ae83-5f99-918f-e894cde2a6a2","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"cf5cd0c4-8c0f-57ee-b1e7-f59bff428d19","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"12827be8-8fe7-58e6-b46b-0fa06d195802","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"245063b1-c9e0-55c6-967d-1df925248140","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"ed3a7bc0-edb6-5cb0-b297-88a7f1dea368","frontmatter":{"path":"/week1/4-intro-generic-types","title":"Introduction to Generic Types"}}},{"node":{"id":"4907fa1c-be35-5a8e-848b-9059033e6ebc","frontmatter":{"path":"/week1/5-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"9f1af357-78d7-500b-bc53-06eb318b58f7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"4ee53f59-04c4-5a8f-b1c2-e03205b67113","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"636573de-0265-5502-b4d7-1c3aefdbf46e","frontmatter":{"path":"/week2/2-programming-errors","title":"Programming Errors"}}},{"node":{"id":"bec69199-b3e1-5c45-a9e9-a76487331db8","frontmatter":{"path":"/week2/4-reading-and-writing","title":"Reading and Writing Files"}}},{"node":{"id":"b731ee75-872e-52d4-a028-e7399bf14337","frontmatter":{"path":"/week2/3-exception-mechanism","title":"The Exception Mechanism"}}},{"node":{"id":"ffab3aea-99aa-5ff8-8c28-18b59bea825f","frontmatter":{"path":"/week2/6-character encoding","title":"Background: Character Encodings"}}},{"node":{"id":"8949c5ff-ae4e-5bfa-80dd-8ef1a5138d37","frontmatter":{"path":"/week2/5-introduction-interfaces","title":"Introduction to Interfaces"}}},{"node":{"id":"1ec875a8-afc1-56f8-bd9a-fd03563fe2f5","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"a515e9ea-a2a3-5f75-9194-7abcdf47defb","frontmatter":{"path":"/week3/2-interface-inheritance","title":"Interface Inheritance"}}},{"node":{"id":"28e10a55-4736-5632-b85a-f3017376a3f8","frontmatter":{"path":"/week3/1-interface-types","title":"Interface Types"}}},{"node":{"id":"5f608e8a-d814-52d5-b5ea-4356dfef6b9e","frontmatter":{"path":"/week3/4-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"3a78b0d2-83cb-5f17-a74f-9dedec7aa5c4","frontmatter":{"path":"/week3/3-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"8215c89f-1c64-5723-8343-f3af0df33725","frontmatter":{"path":"/week3/5-object-superclass","title":"Object, the Cosmic Superclass"}}},{"node":{"id":"98e55501-5f0e-55de-95d6-14c862229309","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"e98cd787-97b8-5887-82d6-e627ca876b75","frontmatter":{"path":"/week3/6-when-to-use-inheritance","title":"When to use inheritance"}}},{"node":{"id":"4995793c-414c-518e-a422-263f5f8886b5","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes"}}},{"node":{"id":"b3a32943-68b8-5031-ae05-3ba3a323f91b","frontmatter":{"path":"/week4/3-exception-class-hierarchy","title":"The Exception Class Hierarchy"}}},{"node":{"id":"780d2f69-ced9-5daa-a5fb-7e48c5a1a847","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class Hierarchies"}}},{"node":{"id":"4aaa128a-808e-5040-83df-dcd56ff13ee4","frontmatter":{"path":"/week4/4-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"4f500573-c057-5653-bb11-6c6df6eadc9e","frontmatter":{"path":"/week4/5-equals-and-hashcode","title":"Equals and Hashcode"}}},{"node":{"id":"9012b897-db81-5e1e-9c03-db343323992a","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"a7e11d31-97be-5aa6-9630-47f4935076e7","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"6a111986-49df-5652-88b5-ad33638017ca","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"320a9747-c2ce-5d30-8d35-f7c9c712a6fa","frontmatter":{"path":"/week5/6-collections-utilities","title":"Collection interfaces"}}},{"node":{"id":"cc5206cc-6844-5675-84db-c7a3634fa148","frontmatter":{"path":"/week5/4-sets","title":"Sets"}}},{"node":{"id":"2cb5a4bb-5a28-5a1e-b822-f73ccd81d477","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"b48b340b-5b5b-5214-b2fd-917ce291c9d2","frontmatter":{"path":"/week5/5-maps","title":"Maps"}}},{"node":{"id":"c60f25f5-bfda-543a-9b93-edb95f1b0583","frontmatter":{"path":"/week5-old/1-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"688cf690-c7fa-572a-90aa-8c12af7d3d96","frontmatter":{"path":"/week5-old/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"e29e8b8e-aa25-5913-9601-76fc8ae45a03","frontmatter":{"path":"/week5-old/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"11c20e12-dae9-5bf3-9682-a21838433337","frontmatter":{"path":"/week5-old","title":"Week 5 Old"}}},{"node":{"id":"ea027db5-b6ed-50bb-a22a-f6081a454f82","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"27931c51-2e50-503b-b311-fe498e84f02c","frontmatter":{"path":"/week6/2-functional-interfaces","title":"Functional Interfaces"}}},{"node":{"id":"6b42bbad-743a-5b8e-bb0d-f7c5805b30df","frontmatter":{"path":"/week6/3-method-references","title":"Method References"}}},{"node":{"id":"05aaa8e9-73f9-5571-9da4-f96b4a3850d6","frontmatter":{"path":"/week6/5-data-processing-pipelines","title":"Data Processing Pipelines"}}},{"node":{"id":"7faf63ba-4322-5ed7-86ec-956b16f78bae","frontmatter":{"path":"/week6/4-default-methods","title":"Default methods and Shorter Comparators"}}},{"node":{"id":"df7960a5-e48d-55d4-acb3-bacf48ef44ce","frontmatter":{"path":"/week6/6-stream-intermediate","title":"Streams: Introduction and Intermediate Operations"}}},{"node":{"id":"98a86293-867b-5414-afff-f34cc855927f","frontmatter":{"path":"/week6/7-streams-terminal","title":"Streams: Terminal Operations"}}},{"node":{"id":"05a4cf2e-9825-5f42-a77f-6e1f86ec62a3","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"fb3d415c-1a50-5244-a7ad-23f3872d748b","frontmatter":{"path":"/week6/8-packages-libraries-maven","title":"Packages, Libraries and Maven"}}},{"node":{"id":"b7432b95-d07c-5e76-9f52-d7db9fb78e55","frontmatter":{"path":"/week6-old","title":"Week 6 (Old)"}}},{"node":{"id":"1729295f-a916-54cb-b51a-0af84e7829a4","frontmatter":{"path":"/week6-old/1-finnish-mooc","title":"Handling collections as streams and Libraries"}}},{"node":{"id":"87c7d5ea-3c02-5098-9335-02d2173a1077","frontmatter":{"path":"/week7/2-java-new-features","title":"Java: new Features"}}},{"node":{"id":"a85e084b-0064-5101-bfa7-7ad051a11f18","frontmatter":{"path":"/week7/3-other-languages","title":"Other languages"}}},{"node":{"id":"4874b4b4-1db9-5bfd-b94b-f0d1941be2a2","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"85e50f42-d57b-582f-acbe-a6f51ca97663","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"accc80ce-525c-537b-898c-318c69288680","frontmatter":{"path":"/week7/4-packages","title":"More on packages"}}},{"node":{"id":"911d4b52-6c3b-5567-b770-ff84f8886837","frontmatter":{"path":"/week7-old","title":"Week 7"}}},{"node":{"id":"87668dcd-5ef2-5dc6-bdf3-69b2551c597c","frontmatter":{"path":"/week7-old/1-data-visualization","title":"Data visualization"}}},{"node":{"id":"6ea3497d-6e0a-5169-95d4-febed5b0330c","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}},{"node":{"id":"7a5afb48-878e-5a87-85f3-b23f5b9490f1","frontmatter":{"path":"/week4/6-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"95cb7d99-91c0-5f54-b22b-dc58890f7c96","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"c0770b58-809a-5f23-b9fd-bc56a224c913","frontmatter":{"path":"/week5-old/2-hash-map","title":"Hash Map"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}