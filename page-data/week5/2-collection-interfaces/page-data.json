{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week5/2-collection-interfaces","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know what an Iterable object is for."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You can use an Iterable object."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know that the Collection interface extends the Iterable interface."}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Collections"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A very important application of computer programs is to manipulate, analyze and process a lot of data.\nIn an Object Oriented language, the data is often converted to objects, for example an object per\ntransaction in a financial dataset, one object per observation in a scientific experiment, or\none object per product in a retailer's databased.\nTo store many of such objects while being able to retrieve them efficiently,\nJava implements several data structures. We already know some of them, such as the\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":" and the array. The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":" implements the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" interface.\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":" is the most commonly used implementation of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", but there are others.\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" interface is a subtype of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" interface, and the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":"\ninterface itself is a subtype of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" interface."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Also, the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" interface and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" interface are super-types of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" interface. To navigate through all these data structures, the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" implements the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" interface. We will cover all these interfaces in the next section."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iterable interface"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable<T>"}]},{"type":"text","value":" are all types that we can use the "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"enhanced for-loop"}]},{"type":"text","value":" on.\nIt specifies only one method: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public Iterator<T> iterator()"}]},{"type":"text","value":".\nAn iterator is able to indicate whether there are any elements left to iterate on (with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hasNext()"}]},{"type":"text","value":") and to produce the next element (with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"next()"}]},{"type":"text","value":")\nWhen we work with a collection of data containing a bunch of objects, it is often useful to do something "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"for each"}]},{"type":"text","value":" object.\nThe enhanced for-loop should be preferred in such cases. It will use the most efficient way to iterate over a collection."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let us first obtain an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" from a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":":"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"List"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" numbers "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Arrays"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"asList"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"24"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"36"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"48"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" iterable "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" numbers"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can use an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" in various equivalent ways, the preferred way being the\nfor-each loop:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" iterable"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is helpful to realize that the for-each loop is just more efficient syntax to\niterate over an iterator. You could do this with slightly longer code as well,\nfor example using a while loop:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" iter "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" iterable"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"iterator"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"while"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"iter"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"hasNext"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" iter"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"next"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can use a regular for-loop as well, where you leave the increment part of the\nfor empty:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" iter "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" iterable"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"iterator"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" iter"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"hasNext"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" iter"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"next"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"hint","name":"Difference between Iterable and Iterator"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the names of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" interfaces are so similar,\nlearners often struggle with the difference. However, the names are quite\ninuitive. In English, the word "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":"  means "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"something that can\nperform iteration"}]},{"type":"text","value":", whereas "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" means something that can be iterated."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One possible analogy is "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"water"}]},{"type":"text","value":" and a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"faucet"}]},{"type":"text","value":". Water can flow, and thus\nwe can say that "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"water"}]},{"type":"text","value":" is "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"flowable"}]},{"type":"text","value":". When we open a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"faucet"}]},{"type":"text","value":", the water\nstarts flowing. However, a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"faucet"}]},{"type":"text","value":" itself is not something that can flow."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":", it is similar: it is a thing that can produce some number\nof objects. Often these objects come from some container, such as a list.\nThe object that performs the iteration, i.e. keeps track of which objects\nhave been seen and which ones are still to come, is an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":"."}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Collection interface"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As mentioned before, it is often used to store a large number of objects\nthat represent some kind of data: "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"transactions"}]},{"type":"text","value":", "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"products"}]},{"type":"text","value":", "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"observations"}]},{"type":"text","value":",\nand many other things. In Java, the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" interface can be used to\nindicate that something holds zero or more objects. It does not define\nany properties yet on how these objects are organized: they could be\nsequentially stored, as happens in a list or array, but they might also\nbe stored in different ways."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Collection interface describes functionality related to these collections.\nThe two main subtypes of the collection interface are "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":".\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" interface provides, for instance, methods for adding\nobjects to the collection ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"add"}]},{"type":"text","value":"), adding all elements from another "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":"\n("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"addAll"}]},{"type":"text","value":"), for checking\nthe existence of an item (the method "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"contains"}]},{"type":"text","value":") and determining the size of a collection (the method "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"size"}]},{"type":"text","value":")."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection<E>"}]},{"type":"text","value":" interface extends "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable<E>"}]},{"type":"text","value":" so we can use the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"enhanced for-loop"}]},{"type":"text","value":" on any "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":".\nOn top of that, it defines a number of methods:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"addAll"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"clear"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"contains"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"containsAll"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"isEmpty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"remove"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"removeAll"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"retainAll"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"size"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The names of these methods are very descriptive. For most of the methods the boolean returned indicates whether the collection changed."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You may wonder why many of the methods, such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"add"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"remove"}]},{"type":"text","value":" return a boolean. Often, the returned value\nof these methods is ignored. It is quite common to write "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"myList.add(\"Hello!\");"}]},{"type":"text","value":" ignoring the fact that a\nboolean is returned. This boolean indicates wheter something has changed in collections. If we add something to a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":",\nthis will always happen, but as we will see a bit later, this may not be the case for a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":". Furthermore, removing an\nobject from a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" may result in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" being unchanged if it turns out the given object was not present in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":"\nto begin with. If you find it handy to determine if your "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" has changed as a result of these calls, it can be\nuseful to use the boolean value that is returned, but in most cases you will be fine ignoring the boolean."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the following sections, the following data structure will be introduced that are or can provide subtypes of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":"\ninterface:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Lists and Queues"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Sets: HashSets and TreeSets"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Maps: HashMaps and TreeMaps"}]},{"type":"text","value":"\n"}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You know what an Iterable object is for.</li>\n<li>You can use an Iterable object.</li>\n<li>You know that the Collection interface extends the Iterable interface.</li>\n</ul></text-box><h2>Collections</h2><p>A very important application of computer programs is to manipulate, analyze and process a lot of data.\nIn an Object Oriented language, the data is often converted to objects, for example an object per\ntransaction in a financial dataset, one object per observation in a scientific experiment, or\none object per product in a retailer's databased.\nTo store many of such objects while being able to retrieve them efficiently,\nJava implements several data structures. We already know some of them, such as the\n<code class=\"language-text\">ArrayList</code> and the array. The <code class=\"language-text\">ArrayList</code> implements the <code class=\"language-text\">List</code> interface.\n<code class=\"language-text\">ArrayList</code> is the most commonly used implementation of the <code class=\"language-text\">List</code>, but there are others.\nThe <code class=\"language-text\">List</code> interface is a subtype of the <code class=\"language-text\">Collection</code> interface, and the <code class=\"language-text\">Collection</code>\ninterface itself is a subtype of the <code class=\"language-text\">Iterable</code> interface.</p><p>Also, the <code class=\"language-text\">Set</code> interface and <code class=\"language-text\">List</code> interface are super-types of the <code class=\"language-text\">Collection</code> interface. To navigate through all these data structures, the <code class=\"language-text\">Collection</code> implements the <code class=\"language-text\">Iterable</code> interface. We will cover all these interfaces in the next section.</p><h3>Iterable interface</h3><p>The interface <code class=\"language-text\">Iterable&lt;T&gt;</code> are all types that we can use the <strong>enhanced for-loop</strong> on.\nIt specifies only one method: <code class=\"language-text\">public Iterator&lt;T&gt; iterator()</code>.\nAn iterator is able to indicate whether there are any elements left to iterate on (with <code class=\"language-text\">hasNext()</code>) and to produce the next element (with <code class=\"language-text\">next()</code>)\nWhen we work with a collection of data containing a bunch of objects, it is often useful to do something <em>for each</em> object.\nThe enhanced for-loop should be preferred in such cases. It will use the most efficient way to iterate over a collection.</p><p>Let us first obtain an <code class=\"language-text\">Iterable</code> from a <code class=\"language-text\">List</code>:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iterable <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">;</span></code></pre></div><p>You can use an <code class=\"language-text\">Iterable</code> in various equivalent ways, the preferred way being the\nfor-each loop:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">:</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>It is helpful to realize that the for-each loop is just more efficient syntax to\niterate over an iterator. You could do this with slightly longer code as well,\nfor example using a while loop:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iter <span class=\"token operator\">=</span> iterable<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>You can use a regular for-loop as well, where you leave the increment part of the\nfor empty:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iter <span class=\"token operator\">=</span> iterable<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><text-box variant='hint' name='Difference between Iterable and Iterator'><p>Since the names of the <code class=\"language-text\">Iterator</code> and <code class=\"language-text\">Iterable</code> interfaces are so similar,\nlearners often struggle with the difference. However, the names are quite\ninuitive. In English, the word <em>Iterator</em>  means <em>something that can\nperform iteration</em>, whereas <em>Iterable</em> means something that can be iterated.</p><p>One possible analogy is <em>water</em> and a <em>faucet</em>. Water can flow, and thus\nwe can say that <em>water</em> is <em>flowable</em>. When we open a <em>faucet</em>, the water\nstarts flowing. However, a <em>faucet</em> itself is not something that can flow.</p><p>With <code class=\"language-text\">Iterable</code>, it is similar: it is a thing that can produce some number\nof objects. Often these objects come from some container, such as a list.\nThe object that performs the iteration, i.e. keeps track of which objects\nhave been seen and which ones are still to come, is an <code class=\"language-text\">Iterator</code>.</p></text-box><h2>Collection interface</h2><p>As mentioned before, it is often used to store a large number of objects\nthat represent some kind of data: <em>transactions</em>, <em>products</em>, <em>observations</em>,\nand many other things. In Java, the <code class=\"language-text\">Collection</code> interface can be used to\nindicate that something holds zero or more objects. It does not define\nany properties yet on how these objects are organized: they could be\nsequentially stored, as happens in a list or array, but they might also\nbe stored in different ways.</p><p>The Collection interface describes functionality related to these collections.\nThe two main subtypes of the collection interface are <code class=\"language-text\">Set</code> and <code class=\"language-text\">List</code>.\nThe <code class=\"language-text\">Collection</code> interface provides, for instance, methods for adding\nobjects to the collection (<code class=\"language-text\">add</code>), adding all elements from another <code class=\"language-text\">Collection</code>\n(<code class=\"language-text\">addAll</code>), for checking\nthe existence of an item (the method <code class=\"language-text\">contains</code>) and determining the size of a collection (the method <code class=\"language-text\">size</code>).</p><p>The <code class=\"language-text\">Collection&lt;E&gt;</code> interface extends <code class=\"language-text\">Iterable&lt;E&gt;</code> so we can use the <em>enhanced for-loop</em> on any <code class=\"language-text\">Collection</code>.\nOn top of that, it defines a number of methods:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> arg0<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>The names of these methods are very descriptive. For most of the methods the boolean returned indicates whether the collection changed.</p><p>You may wonder why many of the methods, such as <code class=\"language-text\">add</code> and <code class=\"language-text\">remove</code> return a boolean. Often, the returned value\nof these methods is ignored. It is quite common to write <code class=\"language-text\">myList.add(&quot;Hello!&quot;);</code> ignoring the fact that a\nboolean is returned. This boolean indicates wheter something has changed in collections. If we add something to a <code class=\"language-text\">List</code>,\nthis will always happen, but as we will see a bit later, this may not be the case for a <code class=\"language-text\">Set</code>. Furthermore, removing an\nobject from a <code class=\"language-text\">List</code> may result in the <code class=\"language-text\">List</code> being unchanged if it turns out the given object was not present in the <code class=\"language-text\">List</code>\nto begin with. If you find it handy to determine if your <code class=\"language-text\">Collection</code> has changed as a result of these calls, it can be\nuseful to use the boolean value that is returned, but in most cases you will be fine ignoring the boolean.</p><p>In the following sections, the following data structure will be introduced that are or can provide subtypes of the <code class=\"language-text\">Collection</code>\ninterface:</p><ul>\n<li>Lists and Queues</li>\n<li>Sets: HashSets and TreeSets</li>\n<li>Maps: HashMaps and TreeMaps</li>\n</ul></div>","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces","ready":true,"extra":null}},"allPages":{"edges":[{"node":{"id":"6dec76aa-fb95-55a4-9d97-c4511f548775","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"6dbbb07f-d2a4-5469-83d8-515ec4da7185","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"401064e0-a39d-550c-92fc-2ef92c6b6668","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"ff3dc30f-0280-5a9c-99ec-c4d2a9b9b9a9","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"a6f621ab-f293-5245-bac0-6f4f2f5556a6","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"a3aa3a67-9479-5974-abe1-6e88980da077","frontmatter":{"path":"/sessions-and-support-old","title":"Sessions and support (old)"}}},{"node":{"id":"5ab906eb-59ec-5d6a-ba6f-c576ba14b3a4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"336ac971-5566-5c22-a38a-4d4805142dbf","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"a1b5795f-40bc-5d04-a5f2-2ac62924c710","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"11f90931-1d19-5a42-a2a5-02076112da75","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"33e23016-f724-5015-8601-ca09c6d06cda","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"94e1d4f2-55f9-5fd6-9511-84057bec1152","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"4394a890-ac32-5276-aecd-6dcff67e87a0","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"2b7fbfb2-0a29-5ed0-8d42-c4cdb2d5fba8","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"58141db4-25a9-5676-a678-92fe0ec5fd30","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"796b5033-974c-5f34-9e3f-2eb8448b7c79","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"e6bcfe98-dbcc-56a1-b383-7b1e85674ef4","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"9f6b1395-1fc7-5409-b994-94c06695727d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"c4c94c91-7ec1-5959-8e12-82b069c5062f","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"db7f8fa4-bc60-55e3-b4e8-c625e56aecb4","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"f1ae2ab3-1c89-5965-a529-b9a9f444450b","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"5144895c-b0d1-59f6-becf-c5a8434f7c2e","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"62d53c71-3ba1-56b3-9bb2-7a7eb55f404d","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"8e88219b-5338-5b7f-bc7d-0db1d73fee7a","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"4c71eeec-43b0-5cbb-bec8-bf59808a8b15","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"52b17ec4-ae83-5f99-918f-e894cde2a6a2","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"cb772258-ee45-574c-b43c-7952b27dd32e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"cf5cd0c4-8c0f-57ee-b1e7-f59bff428d19","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"12827be8-8fe7-58e6-b46b-0fa06d195802","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"245063b1-c9e0-55c6-967d-1df925248140","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"ed3a7bc0-edb6-5cb0-b297-88a7f1dea368","frontmatter":{"path":"/week1/4-intro-generic-types","title":"Introduction to Generic Types"}}},{"node":{"id":"4907fa1c-be35-5a8e-848b-9059033e6ebc","frontmatter":{"path":"/week1/5-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"9f1af357-78d7-500b-bc53-06eb318b58f7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"4ee53f59-04c4-5a8f-b1c2-e03205b67113","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"636573de-0265-5502-b4d7-1c3aefdbf46e","frontmatter":{"path":"/week2/2-programming-errors","title":"Programming Errors"}}},{"node":{"id":"b731ee75-872e-52d4-a028-e7399bf14337","frontmatter":{"path":"/week2/3-exception-mechanism","title":"The Exception Mechanism"}}},{"node":{"id":"bec69199-b3e1-5c45-a9e9-a76487331db8","frontmatter":{"path":"/week2/4-reading-and-writing","title":"Reading and Writing Files"}}},{"node":{"id":"8949c5ff-ae4e-5bfa-80dd-8ef1a5138d37","frontmatter":{"path":"/week2/5-introduction-interfaces","title":"Introduction to Interfaces"}}},{"node":{"id":"ffab3aea-99aa-5ff8-8c28-18b59bea825f","frontmatter":{"path":"/week2/6-character encoding","title":"Background: Character Encodings"}}},{"node":{"id":"1ec875a8-afc1-56f8-bd9a-fd03563fe2f5","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"28e10a55-4736-5632-b85a-f3017376a3f8","frontmatter":{"path":"/week3/1-interface-types","title":"Interface Types"}}},{"node":{"id":"a515e9ea-a2a3-5f75-9194-7abcdf47defb","frontmatter":{"path":"/week3/2-interface-inheritance","title":"Interface Inheritance"}}},{"node":{"id":"3a78b0d2-83cb-5f17-a74f-9dedec7aa5c4","frontmatter":{"path":"/week3/3-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"5f608e8a-d814-52d5-b5ea-4356dfef6b9e","frontmatter":{"path":"/week3/4-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"8215c89f-1c64-5723-8343-f3af0df33725","frontmatter":{"path":"/week3/5-object-superclass","title":"Object, the Cosmic Superclass"}}},{"node":{"id":"e98cd787-97b8-5887-82d6-e627ca876b75","frontmatter":{"path":"/week3/6-when-to-use-inheritance","title":"When to use inheritance"}}},{"node":{"id":"98e55501-5f0e-55de-95d6-14c862229309","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"4995793c-414c-518e-a422-263f5f8886b5","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes"}}},{"node":{"id":"780d2f69-ced9-5daa-a5fb-7e48c5a1a847","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class Hierarchies"}}},{"node":{"id":"b3a32943-68b8-5031-ae05-3ba3a323f91b","frontmatter":{"path":"/week4/3-exception-class-hierarchy","title":"The Exception Class Hierarchy"}}},{"node":{"id":"4aaa128a-808e-5040-83df-dcd56ff13ee4","frontmatter":{"path":"/week4/4-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"4f500573-c057-5653-bb11-6c6df6eadc9e","frontmatter":{"path":"/week4/5-equals-and-hashcode","title":"Equals and Hashcode"}}},{"node":{"id":"a7e11d31-97be-5aa6-9630-47f4935076e7","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"6a111986-49df-5652-88b5-ad33638017ca","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"cc5206cc-6844-5675-84db-c7a3634fa148","frontmatter":{"path":"/week5/4-sets","title":"Sets"}}},{"node":{"id":"b48b340b-5b5b-5214-b2fd-917ce291c9d2","frontmatter":{"path":"/week5/5-maps","title":"Maps"}}},{"node":{"id":"320a9747-c2ce-5d30-8d35-f7c9c712a6fa","frontmatter":{"path":"/week5/6-collections-utilities","title":"Collection interfaces"}}},{"node":{"id":"2cb5a4bb-5a28-5a1e-b822-f73ccd81d477","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"c60f25f5-bfda-543a-9b93-edb95f1b0583","frontmatter":{"path":"/week5-old/1-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"688cf690-c7fa-572a-90aa-8c12af7d3d96","frontmatter":{"path":"/week5-old/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"e29e8b8e-aa25-5913-9601-76fc8ae45a03","frontmatter":{"path":"/week5-old/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"11c20e12-dae9-5bf3-9682-a21838433337","frontmatter":{"path":"/week5-old","title":"Week 5 Old"}}},{"node":{"id":"ea027db5-b6ed-50bb-a22a-f6081a454f82","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"27931c51-2e50-503b-b311-fe498e84f02c","frontmatter":{"path":"/week6/2-functional-interfaces","title":"Functional Interfaces"}}},{"node":{"id":"6b42bbad-743a-5b8e-bb0d-f7c5805b30df","frontmatter":{"path":"/week6/3-method-references","title":"Method References"}}},{"node":{"id":"7faf63ba-4322-5ed7-86ec-956b16f78bae","frontmatter":{"path":"/week6/4-default-methods","title":"Default methods and Shorter Comparators"}}},{"node":{"id":"05aaa8e9-73f9-5571-9da4-f96b4a3850d6","frontmatter":{"path":"/week6/5-data-processing-pipelines","title":"Data Processing Pipelines"}}},{"node":{"id":"df7960a5-e48d-55d4-acb3-bacf48ef44ce","frontmatter":{"path":"/week6/6-stream-intermediate","title":"Streams: Introduction and Intermediate Operations"}}},{"node":{"id":"98a86293-867b-5414-afff-f34cc855927f","frontmatter":{"path":"/week6/7-streams-terminal","title":"Streams: Terminal Operations"}}},{"node":{"id":"fb3d415c-1a50-5244-a7ad-23f3872d748b","frontmatter":{"path":"/week6/8-packages-libraries-maven","title":"Packages, Libraries and Maven"}}},{"node":{"id":"05a4cf2e-9825-5f42-a77f-6e1f86ec62a3","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"1729295f-a916-54cb-b51a-0af84e7829a4","frontmatter":{"path":"/week6-old/1-finnish-mooc","title":"Handling collections as streams and Libraries"}}},{"node":{"id":"b7432b95-d07c-5e76-9f52-d7db9fb78e55","frontmatter":{"path":"/week6-old","title":"Week 6 (Old)"}}},{"node":{"id":"4874b4b4-1db9-5bfd-b94b-f0d1941be2a2","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"87c7d5ea-3c02-5098-9335-02d2173a1077","frontmatter":{"path":"/week7/2-java-new-features","title":"Java: new Features"}}},{"node":{"id":"a85e084b-0064-5101-bfa7-7ad051a11f18","frontmatter":{"path":"/week7/3-other-languages","title":"Other languages"}}},{"node":{"id":"accc80ce-525c-537b-898c-318c69288680","frontmatter":{"path":"/week7/4-packages","title":"More on packages"}}},{"node":{"id":"85e50f42-d57b-582f-acbe-a6f51ca97663","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"87668dcd-5ef2-5dc6-bdf3-69b2551c597c","frontmatter":{"path":"/week7-old/1-data-visualization","title":"Data visualization"}}},{"node":{"id":"911d4b52-6c3b-5567-b770-ff84f8886837","frontmatter":{"path":"/week7-old","title":"Week 7"}}},{"node":{"id":"95cb7d99-91c0-5f54-b22b-dc58890f7c96","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"c0770b58-809a-5f23-b9fd-bc56a224c913","frontmatter":{"path":"/week5-old/2-hash-map","title":"Hash Map"}}},{"node":{"id":"7a5afb48-878e-5a87-85f3-b23f5b9490f1","frontmatter":{"path":"/week4/6-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"9012b897-db81-5e1e-9c03-db343323992a","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"6ea3497d-6e0a-5169-95d4-febed5b0330c","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}