{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week4/3-exception-class-hierarchy","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know why class hierarchies can provide you with better understanding of inheritance."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know how to read a class hierarchy diagram and what the different shapes mean."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know how the Exceptions class hierarchy can be divided in checked and unchecked exceptions."}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In your own small projects, you may end up with a few classes which use inheritance, but often not more than a few.\nHowever, many useful libraries, which you are likely to end up using, make extensive use of it. Often these libraries\nhave a lot of classes, which can be daunting to the uninitiated, but with a diagram it is often easy to understand\nthe structure of these libraries. For example, when you create Graphical User Interfaces (GUIs) there are different\nclasses that represent component (e.g. a button, a text field) and containers that contain multiple components but\nare also containers themselves. They also contain classes that allow you to specify the layout of components, and\nclasses that help specify actions, that can for example be used if a user clicks a button."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Understanding such hierarchies of classes, a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"class hierarchy diagram"}]},{"type":"text","value":" provides insight into the structure of\na library you are using. In these diagrams, we follow the following conventions:"}]},{"type":"element","tagName":"img","properties":{"width":759,"alt":"a class is depicted as a rectangle, an abstract class as a parallelogram, and an interface as a rhombus.","src":"https://user-images.githubusercontent.com/67587903/128322543-447d0abd-831d-43c4-91b4-3fdef2a050d1.PNG"},"children":[]},{"type":"element","tagName":"img","properties":{"width":471,"alt":"Also, an arrow depicts the superclass/subclass or supertype/subtype relationship by pointing towards the superclass or supertype.","src":"https://user-images.githubusercontent.com/67587903/128322544-828b4d41-320f-44f1-8230-aeb8c7d89b07.PNG"},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that the superclass has the form of a rhombus and is thus an abstract class here, whilst the subclass has the form of a rectangle and is therefore a regular class."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We will now consider one class hierarchies from the standard library: the Exception class hierarchy. We hope that this will give you even more insight on the exceptions we learned about last week."}]},{"type":"element","tagName":"img","properties":{"width":789,"alt":"The picture gives an overview of the relations between different sorts of exceptions and errors. These have also been described in the text.","src":"https://user-images.githubusercontent.com/67587903/128322542-70b1c15f-76cc-4004-8817-cb790e80f9c0.PNG"},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Unchecked exceptions"}]},{"type":"text","value":" (those we do not need to catch) are either subclasses of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Error"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RuntimeException"}]},{"type":"text","value":". These have a green background in our picture.\nAll other exceptions must be caught and are called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"checked exceptions"}]},{"type":"text","value":". These have a blue background in our picture."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The answer on whether an exception must be caught or may be caught can thus be found by looking at the Exception hierarchy. "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Unchecked Exceptions"}]},{"type":"text","value":" do not have to be caught and are either a subclass of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Error"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RuntimeException"}]},{"type":"text","value":". All other exceptions are "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Checked Exceptions"}]},{"type":"text","value":" and must be caught.\nYou can even create your own exception types by writing "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public class MyException extends IllegalArgumentException {...}"}]},{"type":"text","value":". If you want it to be unchecked, you put them underneath the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RuntimeException"}]},{"type":"text","value":" in the Exception class hierarchy, and otherwise, in case of a checked exception, you let it be a subclass of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Exception"}]},{"type":"text","value":", but not of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RuntimeException"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"NB."}]},{"type":"text","value":" Please note that you do "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not"}]},{"type":"text","value":" have to learn the upper hierarchy diagram by heart. You can always figure out these relationship from the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"reference"}]},{"type":"text","value":" that is provided during the exam. You do need to remember that "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"unchecked"}]},{"type":"text","value":" exceptions are all types that are subtypes of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Error"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RuntimeException"}]},{"type":"text","value":", and yopu should be able to figure out the rest using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" relantionships listed in the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"reference"}]},{"type":"text","value":"."}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You know why class hierarchies can provide you with better understanding of inheritance.</li>\n<li>You know how to read a class hierarchy diagram and what the different shapes mean.</li>\n<li>You know how the Exceptions class hierarchy can be divided in checked and unchecked exceptions.</li>\n</ul></text-box><p>In your own small projects, you may end up with a few classes which use inheritance, but often not more than a few.\nHowever, many useful libraries, which you are likely to end up using, make extensive use of it. Often these libraries\nhave a lot of classes, which can be daunting to the uninitiated, but with a diagram it is often easy to understand\nthe structure of these libraries. For example, when you create Graphical User Interfaces (GUIs) there are different\nclasses that represent component (e.g. a button, a text field) and containers that contain multiple components but\nare also containers themselves. They also contain classes that allow you to specify the layout of components, and\nclasses that help specify actions, that can for example be used if a user clicks a button.</p><p>Understanding such hierarchies of classes, a <em>class hierarchy diagram</em> provides insight into the structure of\na library you are using. In these diagrams, we follow the following conventions:</p><img width=\"759\" alt=\"a class is depicted as a rectangle, an abstract class as a parallelogram, and an interface as a rhombus.\" src=\"https://user-images.githubusercontent.com/67587903/128322543-447d0abd-831d-43c4-91b4-3fdef2a050d1.PNG\"><img width=\"471\" alt=\"Also, an arrow depicts the superclass/subclass or supertype/subtype relationship by pointing towards the superclass or supertype.\" src=\"https://user-images.githubusercontent.com/67587903/128322544-828b4d41-320f-44f1-8230-aeb8c7d89b07.PNG\"><p>Note that the superclass has the form of a rhombus and is thus an abstract class here, whilst the subclass has the form of a rectangle and is therefore a regular class.</p><p>We will now consider one class hierarchies from the standard library: the Exception class hierarchy. We hope that this will give you even more insight on the exceptions we learned about last week.</p><img width=\"789\" alt=\"The picture gives an overview of the relations between different sorts of exceptions and errors. These have also been described in the text.\" src=\"https://user-images.githubusercontent.com/67587903/128322542-70b1c15f-76cc-4004-8817-cb790e80f9c0.PNG\"><p><em>Unchecked exceptions</em> (those we do not need to catch) are either subclasses of <code class=\"language-text\">Error</code> or <code class=\"language-text\">RuntimeException</code>. These have a green background in our picture.\nAll other exceptions must be caught and are called <em>checked exceptions</em>. These have a blue background in our picture.</p><p>The answer on whether an exception must be caught or may be caught can thus be found by looking at the Exception hierarchy. <em>Unchecked Exceptions</em> do not have to be caught and are either a subclass of <code class=\"language-text\">Error</code> or <code class=\"language-text\">RuntimeException</code>. All other exceptions are <em>Checked Exceptions</em> and must be caught.\nYou can even create your own exception types by writing <code class=\"language-text\">public class MyException extends IllegalArgumentException {...}</code>. If you want it to be unchecked, you put them underneath the <code class=\"language-text\">RuntimeException</code> in the Exception class hierarchy, and otherwise, in case of a checked exception, you let it be a subclass of <code class=\"language-text\">Exception</code>, but not of <code class=\"language-text\">RuntimeException</code>.</p><p><strong>NB.</strong> Please note that you do <em>not</em> have to learn the upper hierarchy diagram by heart. You can always figure out these relationship from the <em>reference</em> that is provided during the exam. You do need to remember that <em>unchecked</em> exceptions are all types that are subtypes of <code class=\"language-text\">Error</code> and <code class=\"language-text\">RuntimeException</code>, and yopu should be able to figure out the rest using the <code class=\"language-text\">extends</code> relantionships listed in the <em>reference</em>.</p></div>","frontmatter":{"path":"/week4/3-exception-class-hierarchy","title":"The Exception Class Hierarchy","ready":true,"extra":null}},"allPages":{"edges":[{"node":{"id":"6dec76aa-fb95-55a4-9d97-c4511f548775","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"6dbbb07f-d2a4-5469-83d8-515ec4da7185","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"401064e0-a39d-550c-92fc-2ef92c6b6668","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"ff3dc30f-0280-5a9c-99ec-c4d2a9b9b9a9","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"a6f621ab-f293-5245-bac0-6f4f2f5556a6","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"a3aa3a67-9479-5974-abe1-6e88980da077","frontmatter":{"path":"/sessions-and-support-old","title":"Sessions and support (old)"}}},{"node":{"id":"5ab906eb-59ec-5d6a-ba6f-c576ba14b3a4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"336ac971-5566-5c22-a38a-4d4805142dbf","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"a1b5795f-40bc-5d04-a5f2-2ac62924c710","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"11f90931-1d19-5a42-a2a5-02076112da75","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"33e23016-f724-5015-8601-ca09c6d06cda","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"94e1d4f2-55f9-5fd6-9511-84057bec1152","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"4394a890-ac32-5276-aecd-6dcff67e87a0","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"2b7fbfb2-0a29-5ed0-8d42-c4cdb2d5fba8","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"58141db4-25a9-5676-a678-92fe0ec5fd30","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"796b5033-974c-5f34-9e3f-2eb8448b7c79","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"e6bcfe98-dbcc-56a1-b383-7b1e85674ef4","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"9f6b1395-1fc7-5409-b994-94c06695727d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"c4c94c91-7ec1-5959-8e12-82b069c5062f","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"db7f8fa4-bc60-55e3-b4e8-c625e56aecb4","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"f1ae2ab3-1c89-5965-a529-b9a9f444450b","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"5144895c-b0d1-59f6-becf-c5a8434f7c2e","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"62d53c71-3ba1-56b3-9bb2-7a7eb55f404d","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"8e88219b-5338-5b7f-bc7d-0db1d73fee7a","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"4c71eeec-43b0-5cbb-bec8-bf59808a8b15","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"52b17ec4-ae83-5f99-918f-e894cde2a6a2","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"cb772258-ee45-574c-b43c-7952b27dd32e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"cf5cd0c4-8c0f-57ee-b1e7-f59bff428d19","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"12827be8-8fe7-58e6-b46b-0fa06d195802","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"245063b1-c9e0-55c6-967d-1df925248140","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"ed3a7bc0-edb6-5cb0-b297-88a7f1dea368","frontmatter":{"path":"/week1/4-intro-generic-types","title":"Introduction to Generic Types"}}},{"node":{"id":"4907fa1c-be35-5a8e-848b-9059033e6ebc","frontmatter":{"path":"/week1/5-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"9f1af357-78d7-500b-bc53-06eb318b58f7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"4ee53f59-04c4-5a8f-b1c2-e03205b67113","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"636573de-0265-5502-b4d7-1c3aefdbf46e","frontmatter":{"path":"/week2/2-programming-errors","title":"Programming Errors"}}},{"node":{"id":"b731ee75-872e-52d4-a028-e7399bf14337","frontmatter":{"path":"/week2/3-exception-mechanism","title":"The Exception Mechanism"}}},{"node":{"id":"bec69199-b3e1-5c45-a9e9-a76487331db8","frontmatter":{"path":"/week2/4-reading-and-writing","title":"Reading and Writing Files"}}},{"node":{"id":"8949c5ff-ae4e-5bfa-80dd-8ef1a5138d37","frontmatter":{"path":"/week2/5-introduction-interfaces","title":"Introduction to Interfaces"}}},{"node":{"id":"ffab3aea-99aa-5ff8-8c28-18b59bea825f","frontmatter":{"path":"/week2/6-character encoding","title":"Background: Character Encodings"}}},{"node":{"id":"1ec875a8-afc1-56f8-bd9a-fd03563fe2f5","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"28e10a55-4736-5632-b85a-f3017376a3f8","frontmatter":{"path":"/week3/1-interface-types","title":"Interface Types"}}},{"node":{"id":"a515e9ea-a2a3-5f75-9194-7abcdf47defb","frontmatter":{"path":"/week3/2-interface-inheritance","title":"Interface Inheritance"}}},{"node":{"id":"3a78b0d2-83cb-5f17-a74f-9dedec7aa5c4","frontmatter":{"path":"/week3/3-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"5f608e8a-d814-52d5-b5ea-4356dfef6b9e","frontmatter":{"path":"/week3/4-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"8215c89f-1c64-5723-8343-f3af0df33725","frontmatter":{"path":"/week3/5-object-superclass","title":"Object, the Cosmic Superclass"}}},{"node":{"id":"e98cd787-97b8-5887-82d6-e627ca876b75","frontmatter":{"path":"/week3/6-when-to-use-inheritance","title":"When to use inheritance"}}},{"node":{"id":"98e55501-5f0e-55de-95d6-14c862229309","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"4995793c-414c-518e-a422-263f5f8886b5","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes"}}},{"node":{"id":"780d2f69-ced9-5daa-a5fb-7e48c5a1a847","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class Hierarchies"}}},{"node":{"id":"b3a32943-68b8-5031-ae05-3ba3a323f91b","frontmatter":{"path":"/week4/3-exception-class-hierarchy","title":"The Exception Class Hierarchy"}}},{"node":{"id":"4aaa128a-808e-5040-83df-dcd56ff13ee4","frontmatter":{"path":"/week4/4-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"4f500573-c057-5653-bb11-6c6df6eadc9e","frontmatter":{"path":"/week4/5-equals-and-hashcode","title":"Equals and Hashcode"}}},{"node":{"id":"a7e11d31-97be-5aa6-9630-47f4935076e7","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"6a111986-49df-5652-88b5-ad33638017ca","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"cc5206cc-6844-5675-84db-c7a3634fa148","frontmatter":{"path":"/week5/4-sets","title":"Sets"}}},{"node":{"id":"b48b340b-5b5b-5214-b2fd-917ce291c9d2","frontmatter":{"path":"/week5/5-maps","title":"Maps"}}},{"node":{"id":"320a9747-c2ce-5d30-8d35-f7c9c712a6fa","frontmatter":{"path":"/week5/6-collections-utilities","title":"Collection interfaces"}}},{"node":{"id":"2cb5a4bb-5a28-5a1e-b822-f73ccd81d477","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"c60f25f5-bfda-543a-9b93-edb95f1b0583","frontmatter":{"path":"/week5-old/1-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"688cf690-c7fa-572a-90aa-8c12af7d3d96","frontmatter":{"path":"/week5-old/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"e29e8b8e-aa25-5913-9601-76fc8ae45a03","frontmatter":{"path":"/week5-old/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"11c20e12-dae9-5bf3-9682-a21838433337","frontmatter":{"path":"/week5-old","title":"Week 5 Old"}}},{"node":{"id":"ea027db5-b6ed-50bb-a22a-f6081a454f82","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"27931c51-2e50-503b-b311-fe498e84f02c","frontmatter":{"path":"/week6/2-functional-interfaces","title":"Functional Interfaces"}}},{"node":{"id":"6b42bbad-743a-5b8e-bb0d-f7c5805b30df","frontmatter":{"path":"/week6/3-method-references","title":"Method References"}}},{"node":{"id":"7faf63ba-4322-5ed7-86ec-956b16f78bae","frontmatter":{"path":"/week6/4-default-methods","title":"Default methods and Shorter Comparators"}}},{"node":{"id":"05aaa8e9-73f9-5571-9da4-f96b4a3850d6","frontmatter":{"path":"/week6/5-data-processing-pipelines","title":"Data Processing Pipelines"}}},{"node":{"id":"df7960a5-e48d-55d4-acb3-bacf48ef44ce","frontmatter":{"path":"/week6/6-stream-intermediate","title":"Streams: Introduction and Intermediate Operations"}}},{"node":{"id":"98a86293-867b-5414-afff-f34cc855927f","frontmatter":{"path":"/week6/7-streams-terminal","title":"Streams: Terminal Operations"}}},{"node":{"id":"fb3d415c-1a50-5244-a7ad-23f3872d748b","frontmatter":{"path":"/week6/8-packages-libraries-maven","title":"Packages, Libraries and Maven"}}},{"node":{"id":"05a4cf2e-9825-5f42-a77f-6e1f86ec62a3","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"1729295f-a916-54cb-b51a-0af84e7829a4","frontmatter":{"path":"/week6-old/1-finnish-mooc","title":"Handling collections as streams and Libraries"}}},{"node":{"id":"b7432b95-d07c-5e76-9f52-d7db9fb78e55","frontmatter":{"path":"/week6-old","title":"Week 6 (Old)"}}},{"node":{"id":"4874b4b4-1db9-5bfd-b94b-f0d1941be2a2","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"87c7d5ea-3c02-5098-9335-02d2173a1077","frontmatter":{"path":"/week7/2-java-new-features","title":"Java: new Features"}}},{"node":{"id":"a85e084b-0064-5101-bfa7-7ad051a11f18","frontmatter":{"path":"/week7/3-other-languages","title":"Other languages"}}},{"node":{"id":"accc80ce-525c-537b-898c-318c69288680","frontmatter":{"path":"/week7/4-packages","title":"More on packages"}}},{"node":{"id":"85e50f42-d57b-582f-acbe-a6f51ca97663","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"87668dcd-5ef2-5dc6-bdf3-69b2551c597c","frontmatter":{"path":"/week7-old/1-data-visualization","title":"Data visualization"}}},{"node":{"id":"911d4b52-6c3b-5567-b770-ff84f8886837","frontmatter":{"path":"/week7-old","title":"Week 7"}}},{"node":{"id":"95cb7d99-91c0-5f54-b22b-dc58890f7c96","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"c0770b58-809a-5f23-b9fd-bc56a224c913","frontmatter":{"path":"/week5-old/2-hash-map","title":"Hash Map"}}},{"node":{"id":"7a5afb48-878e-5a87-85f3-b23f5b9490f1","frontmatter":{"path":"/week4/6-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"9012b897-db81-5e1e-9c03-db343323992a","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"6ea3497d-6e0a-5169-95d4-febed5b0330c","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}