{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week6/3-method-references","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You understand and can write method references."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You are aware of the different types of method references"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You understand that method references are shorter notation for some specific lambda expressions"}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Method references"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As we are now familiar with lambda expressions and functional interfaces, we should be comfortable with writing code such as:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Consumer"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" printer "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" str "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"str"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Function"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Course"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" courseToString "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" c "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" c"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getTeacher"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"BinaryOperator"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" plus "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"a"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"b"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"sum"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"a"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"b"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"While these are simple and elegant lambda expressions, there is still a small bit of boilerplate code left in these examples. In these examples, our intention is to use the method "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"System.out.println"}]},{"type":"text","value":" as a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Consumer<String>"}]},{"type":"text","value":", use the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getTeacher()"}]},{"type":"text","value":" method to convert a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Course"}]},{"type":"text","value":" to a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":", or use the method "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Integer.sum"}]},{"type":"text","value":" as a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BinaryOperator"}]},{"type":"text","value":". However, we still define variables such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"str"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"c"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" to utilize these methods within the functional interfaces."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An alternative to lambda expression are "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"method references"}]},{"type":"text","value":". A method reference is a way in which we can express the idea that the implementation of a functional interface is given by a particular method. A method reference is given using either a class name or an object, followed by double colon operator "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" followed by the name of the method. Since we are not calling the method, but want to use it as an object of a function interface type, parenthesis and arguments are omitted. Using method references, we can write the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"printer"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"courseToString"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"plus"}]},{"type":"text","value":" references as follows:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Consumer"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" printer "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Function"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Course"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" courseToString "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Course"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getTeacher"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"BinaryOperator"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" plus "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"sum"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that you can always use the lambda notation instead: the main advantage of method references is that they are shorter, and we do not have the need to introduce a variable. Another advantage of method references, is that methods are generally easier to test and debug than lambda expressions. For very short lambda expressions, there is often little need for debugging, but when we write longer lambda expressions, debugging becomes complicated."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recall our long lambda expression implementing a rather complicated "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparator<Course>"}]},{"type":"text","value":" given in Listing [[lst:longlambda]][1]. This is a good candidate to replace with a method reference as follows:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"ComparatorExamples"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"compareCourses"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Course"}]},{"type":"text","value":" o1"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Course"}]},{"type":"text","value":" o2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"!"}]},{"type":"text","value":"o1"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getTeacher"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"equals"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"o2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getTeacher"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" o1"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getTeacher"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"compareTo"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"o2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getTeacher"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"o1"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getCourseYear"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"!="}]},{"type":"text","value":" o2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getCourseYear"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" o1"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getCourseYear"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" o2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getCourseYear"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" o1"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getCourseName"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"compareTo"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"o2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getCourseName"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"sortCourses"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"List"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Course"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" courses"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collections"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"sort"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"courses"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"ComparatorExamples"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"compareCourses"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The advantage of this approach, over writing a lambda expression, is that it is now easier to write test cases that call the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"compareCourses"}]},{"type":"text","value":" method directly. It also makes the code a bit easier to read: we have fewer nested blocks. In fact, the only Java 8 style syntax we are using here is a single method reference."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are some variants of the method references, based on whether you write a class name or object before the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" and whether the method name after the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" or not. Table [1][] shows all five types of method references, together with their equivalent lambda expressions."}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tagName":"table","properties":{},"children":[{"type":"element","tagName":"thead","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"th","properties":{"align":"left"},"children":[{"type":"text","value":"Type"}]},{"type":"element","tagName":"th","properties":{"align":"left"},"children":[{"type":"text","value":"Method Reference"}]},{"type":"element","tagName":"th","properties":{"align":"left"},"children":[{"type":"text","value":"Lambda Expression"}]}]}]},{"type":"element","tagName":"tbody","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"Static"}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"MyClass::myStaticMethod"}]}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"(arg) -> MyClass.myStaticMethod(arg)"}]}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"Bound"}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"var::myMethod"}]}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"(arg) -> var.myMethod(arg)"}]}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"Unbound"}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"MyClass::myMethod"}]}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"(obj, arg) -> obj.myMethod(arg)"}]}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"Constructor"}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"MyClass::new"}]}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"(arg) -> new MyClass(arg)"}]}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"Array"}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int[]::new"}]}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"(len) -> new int[len]"}]}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are five types of method references. The five types are shown here, together with an equivalent lambda expression."}]},{"type":"comment","value":" TODO: discussion of static vs non-static in a special interest block "}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You understand and can write method references.</li>\n<li>You are aware of the different types of method references</li>\n<li>You understand that method references are shorter notation for some specific lambda expressions</li>\n</ul></text-box><h2>Method references</h2><p>As we are now familiar with lambda expressions and functional interfaces, we should be comfortable with writing code such as:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> printer <span class=\"token operator\">=</span> str <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> courseToString <span class=\"token operator\">=</span> c <span class=\"token operator\">-></span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getTeacher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> plus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>While these are simple and elegant lambda expressions, there is still a small bit of boilerplate code left in these examples. In these examples, our intention is to use the method <code class=\"language-text\">System.out.println</code> as a <code class=\"language-text\">Consumer&lt;String&gt;</code>, use the <code class=\"language-text\">getTeacher()</code> method to convert a <code class=\"language-text\">Course</code> to a <code class=\"language-text\">String</code>, or use the method <code class=\"language-text\">Integer.sum</code> as a <code class=\"language-text\">BinaryOperator</code>. However, we still define variables such as <code class=\"language-text\">str</code>, <code class=\"language-text\">c</code>, <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code> to utilize these methods within the functional interfaces.</p><p>An alternative to lambda expression are <strong>method references</strong>. A method reference is a way in which we can express the idea that the implementation of a functional interface is given by a particular method. A method reference is given using either a class name or an object, followed by double colon operator <code class=\"language-text\">::</code> followed by the name of the method. Since we are not calling the method, but want to use it as an object of a function interface type, parenthesis and arguments are omitted. Using method references, we can write the <code class=\"language-text\">printer</code>, <code class=\"language-text\">courseToString</code> and <code class=\"language-text\">plus</code> references as follows:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> printer <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> courseToString <span class=\"token operator\">=</span> <span class=\"token class-name\">Course</span><span class=\"token operator\">::</span><span class=\"token function\">getTeacher</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> plus <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">;</span></code></pre></div><p>Note that you can always use the lambda notation instead: the main advantage of method references is that they are shorter, and we do not have the need to introduce a variable. Another advantage of method references, is that methods are generally easier to test and debug than lambda expressions. For very short lambda expressions, there is often little need for debugging, but when we write longer lambda expressions, debugging becomes complicated.</p><p>Recall our long lambda expression implementing a rather complicated <code class=\"language-text\">Comparator&lt;Course&gt;</code> given in Listing [[lst:longlambda]][1]. This is a good candidate to replace with a method reference as follows:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComparatorExamples</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareCourses</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Course</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Course</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>o1<span class=\"token punctuation\">.</span><span class=\"token function\">getTeacher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getTeacher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getTeacher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getTeacher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span><span class=\"token function\">getCourseYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o2<span class=\"token punctuation\">.</span><span class=\"token function\">getCourseYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getCourseYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span><span class=\"token function\">getCourseYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getCourseName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getCourseName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortCourses</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">></span></span> courses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>courses<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ComparatorExamples</span><span class=\"token operator\">::</span><span class=\"token function\">compareCourses</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>The advantage of this approach, over writing a lambda expression, is that it is now easier to write test cases that call the <code class=\"language-text\">compareCourses</code> method directly. It also makes the code a bit easier to read: we have fewer nested blocks. In fact, the only Java 8 style syntax we are using here is a single method reference.</p><p>There are some variants of the method references, based on whether you write a class name or object before the <code class=\"language-text\">::</code> and whether the method name after the <code class=\"language-text\">::</code> is <code class=\"language-text\">static</code> or not. Table [1][] shows all five types of method references, together with their equivalent lambda expressions.</p><table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Method Reference</th>\n<th align=\"left\">Lambda Expression</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Static</td>\n<td align=\"left\"><code class=\"language-text\">MyClass::myStaticMethod</code></td>\n<td align=\"left\"><code class=\"language-text\">(arg) -&gt; MyClass.myStaticMethod(arg)</code></td>\n</tr>\n<tr>\n<td align=\"left\">Bound</td>\n<td align=\"left\"><code class=\"language-text\">var::myMethod</code></td>\n<td align=\"left\"><code class=\"language-text\">(arg) -&gt; var.myMethod(arg)</code></td>\n</tr>\n<tr>\n<td align=\"left\">Unbound</td>\n<td align=\"left\"><code class=\"language-text\">MyClass::myMethod</code></td>\n<td align=\"left\"><code class=\"language-text\">(obj, arg) -&gt; obj.myMethod(arg)</code></td>\n</tr>\n<tr>\n<td align=\"left\">Constructor</td>\n<td align=\"left\"><code class=\"language-text\">MyClass::new</code></td>\n<td align=\"left\"><code class=\"language-text\">(arg) -&gt; new MyClass(arg)</code></td>\n</tr>\n<tr>\n<td align=\"left\">Array</td>\n<td align=\"left\"><code class=\"language-text\">int[]::new</code></td>\n<td align=\"left\"><code class=\"language-text\">(len) -&gt; new int[len]</code></td>\n</tr>\n</tbody>\n</table><p>There are five types of method references. The five types are shown here, together with an equivalent lambda expression.</p><!-- TODO: discussion of static vs non-static in a special interest block --></div>","frontmatter":{"path":"/week6/3-method-references","title":"Method References","ready":true,"extra":null}},"allPages":{"edges":[{"node":{"id":"6dec76aa-fb95-55a4-9d97-c4511f548775","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"6dbbb07f-d2a4-5469-83d8-515ec4da7185","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"401064e0-a39d-550c-92fc-2ef92c6b6668","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"ff3dc30f-0280-5a9c-99ec-c4d2a9b9b9a9","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"a6f621ab-f293-5245-bac0-6f4f2f5556a6","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"a3aa3a67-9479-5974-abe1-6e88980da077","frontmatter":{"path":"/sessions-and-support-old","title":"Sessions and support (old)"}}},{"node":{"id":"336ac971-5566-5c22-a38a-4d4805142dbf","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"5ab906eb-59ec-5d6a-ba6f-c576ba14b3a4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"a1b5795f-40bc-5d04-a5f2-2ac62924c710","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"11f90931-1d19-5a42-a2a5-02076112da75","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"33e23016-f724-5015-8601-ca09c6d06cda","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"94e1d4f2-55f9-5fd6-9511-84057bec1152","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"4394a890-ac32-5276-aecd-6dcff67e87a0","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"2b7fbfb2-0a29-5ed0-8d42-c4cdb2d5fba8","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"58141db4-25a9-5676-a678-92fe0ec5fd30","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"796b5033-974c-5f34-9e3f-2eb8448b7c79","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"e6bcfe98-dbcc-56a1-b383-7b1e85674ef4","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"9f6b1395-1fc7-5409-b994-94c06695727d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"cb772258-ee45-574c-b43c-7952b27dd32e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"c4c94c91-7ec1-5959-8e12-82b069c5062f","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"db7f8fa4-bc60-55e3-b4e8-c625e56aecb4","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"f1ae2ab3-1c89-5965-a529-b9a9f444450b","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"5144895c-b0d1-59f6-becf-c5a8434f7c2e","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"62d53c71-3ba1-56b3-9bb2-7a7eb55f404d","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"8e88219b-5338-5b7f-bc7d-0db1d73fee7a","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"4c71eeec-43b0-5cbb-bec8-bf59808a8b15","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"52b17ec4-ae83-5f99-918f-e894cde2a6a2","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"cf5cd0c4-8c0f-57ee-b1e7-f59bff428d19","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"12827be8-8fe7-58e6-b46b-0fa06d195802","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"245063b1-c9e0-55c6-967d-1df925248140","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"ed3a7bc0-edb6-5cb0-b297-88a7f1dea368","frontmatter":{"path":"/week1/4-intro-generic-types","title":"Introduction to Generic Types"}}},{"node":{"id":"4907fa1c-be35-5a8e-848b-9059033e6ebc","frontmatter":{"path":"/week1/5-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"9f1af357-78d7-500b-bc53-06eb318b58f7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"4ee53f59-04c4-5a8f-b1c2-e03205b67113","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"636573de-0265-5502-b4d7-1c3aefdbf46e","frontmatter":{"path":"/week2/2-programming-errors","title":"Programming Errors"}}},{"node":{"id":"bec69199-b3e1-5c45-a9e9-a76487331db8","frontmatter":{"path":"/week2/4-reading-and-writing","title":"Reading and Writing Files"}}},{"node":{"id":"b731ee75-872e-52d4-a028-e7399bf14337","frontmatter":{"path":"/week2/3-exception-mechanism","title":"The Exception Mechanism"}}},{"node":{"id":"ffab3aea-99aa-5ff8-8c28-18b59bea825f","frontmatter":{"path":"/week2/6-character encoding","title":"Background: Character Encodings"}}},{"node":{"id":"8949c5ff-ae4e-5bfa-80dd-8ef1a5138d37","frontmatter":{"path":"/week2/5-introduction-interfaces","title":"Introduction to Interfaces"}}},{"node":{"id":"1ec875a8-afc1-56f8-bd9a-fd03563fe2f5","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"a515e9ea-a2a3-5f75-9194-7abcdf47defb","frontmatter":{"path":"/week3/2-interface-inheritance","title":"Interface Inheritance"}}},{"node":{"id":"28e10a55-4736-5632-b85a-f3017376a3f8","frontmatter":{"path":"/week3/1-interface-types","title":"Interface Types"}}},{"node":{"id":"5f608e8a-d814-52d5-b5ea-4356dfef6b9e","frontmatter":{"path":"/week3/4-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"3a78b0d2-83cb-5f17-a74f-9dedec7aa5c4","frontmatter":{"path":"/week3/3-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"8215c89f-1c64-5723-8343-f3af0df33725","frontmatter":{"path":"/week3/5-object-superclass","title":"Object, the Cosmic Superclass"}}},{"node":{"id":"98e55501-5f0e-55de-95d6-14c862229309","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"e98cd787-97b8-5887-82d6-e627ca876b75","frontmatter":{"path":"/week3/6-when-to-use-inheritance","title":"When to use inheritance"}}},{"node":{"id":"4995793c-414c-518e-a422-263f5f8886b5","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes"}}},{"node":{"id":"b3a32943-68b8-5031-ae05-3ba3a323f91b","frontmatter":{"path":"/week4/3-exception-class-hierarchy","title":"The Exception Class Hierarchy"}}},{"node":{"id":"780d2f69-ced9-5daa-a5fb-7e48c5a1a847","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class Hierarchies"}}},{"node":{"id":"4aaa128a-808e-5040-83df-dcd56ff13ee4","frontmatter":{"path":"/week4/4-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"4f500573-c057-5653-bb11-6c6df6eadc9e","frontmatter":{"path":"/week4/5-equals-and-hashcode","title":"Equals and Hashcode"}}},{"node":{"id":"9012b897-db81-5e1e-9c03-db343323992a","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"a7e11d31-97be-5aa6-9630-47f4935076e7","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"6a111986-49df-5652-88b5-ad33638017ca","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"320a9747-c2ce-5d30-8d35-f7c9c712a6fa","frontmatter":{"path":"/week5/6-collections-utilities","title":"Collection interfaces"}}},{"node":{"id":"cc5206cc-6844-5675-84db-c7a3634fa148","frontmatter":{"path":"/week5/4-sets","title":"Sets"}}},{"node":{"id":"2cb5a4bb-5a28-5a1e-b822-f73ccd81d477","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"b48b340b-5b5b-5214-b2fd-917ce291c9d2","frontmatter":{"path":"/week5/5-maps","title":"Maps"}}},{"node":{"id":"c60f25f5-bfda-543a-9b93-edb95f1b0583","frontmatter":{"path":"/week5-old/1-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"688cf690-c7fa-572a-90aa-8c12af7d3d96","frontmatter":{"path":"/week5-old/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"e29e8b8e-aa25-5913-9601-76fc8ae45a03","frontmatter":{"path":"/week5-old/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"11c20e12-dae9-5bf3-9682-a21838433337","frontmatter":{"path":"/week5-old","title":"Week 5 Old"}}},{"node":{"id":"ea027db5-b6ed-50bb-a22a-f6081a454f82","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"27931c51-2e50-503b-b311-fe498e84f02c","frontmatter":{"path":"/week6/2-functional-interfaces","title":"Functional Interfaces"}}},{"node":{"id":"6b42bbad-743a-5b8e-bb0d-f7c5805b30df","frontmatter":{"path":"/week6/3-method-references","title":"Method References"}}},{"node":{"id":"05aaa8e9-73f9-5571-9da4-f96b4a3850d6","frontmatter":{"path":"/week6/5-data-processing-pipelines","title":"Data Processing Pipelines"}}},{"node":{"id":"7faf63ba-4322-5ed7-86ec-956b16f78bae","frontmatter":{"path":"/week6/4-default-methods","title":"Default methods and Shorter Comparators"}}},{"node":{"id":"df7960a5-e48d-55d4-acb3-bacf48ef44ce","frontmatter":{"path":"/week6/6-stream-intermediate","title":"Streams: Introduction and Intermediate Operations"}}},{"node":{"id":"98a86293-867b-5414-afff-f34cc855927f","frontmatter":{"path":"/week6/7-streams-terminal","title":"Streams: Terminal Operations"}}},{"node":{"id":"05a4cf2e-9825-5f42-a77f-6e1f86ec62a3","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"fb3d415c-1a50-5244-a7ad-23f3872d748b","frontmatter":{"path":"/week6/8-packages-libraries-maven","title":"Packages, Libraries and Maven"}}},{"node":{"id":"b7432b95-d07c-5e76-9f52-d7db9fb78e55","frontmatter":{"path":"/week6-old","title":"Week 6 (Old)"}}},{"node":{"id":"1729295f-a916-54cb-b51a-0af84e7829a4","frontmatter":{"path":"/week6-old/1-finnish-mooc","title":"Handling collections as streams and Libraries"}}},{"node":{"id":"87c7d5ea-3c02-5098-9335-02d2173a1077","frontmatter":{"path":"/week7/2-java-new-features","title":"Java: new Features"}}},{"node":{"id":"a85e084b-0064-5101-bfa7-7ad051a11f18","frontmatter":{"path":"/week7/3-other-languages","title":"Other languages"}}},{"node":{"id":"4874b4b4-1db9-5bfd-b94b-f0d1941be2a2","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"85e50f42-d57b-582f-acbe-a6f51ca97663","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"accc80ce-525c-537b-898c-318c69288680","frontmatter":{"path":"/week7/4-packages","title":"More on packages"}}},{"node":{"id":"911d4b52-6c3b-5567-b770-ff84f8886837","frontmatter":{"path":"/week7-old","title":"Week 7"}}},{"node":{"id":"87668dcd-5ef2-5dc6-bdf3-69b2551c597c","frontmatter":{"path":"/week7-old/1-data-visualization","title":"Data visualization"}}},{"node":{"id":"6ea3497d-6e0a-5169-95d4-febed5b0330c","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}},{"node":{"id":"7a5afb48-878e-5a87-85f3-b23f5b9490f1","frontmatter":{"path":"/week4/6-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"95cb7d99-91c0-5f54-b22b-dc58890f7c96","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"c0770b58-809a-5f23-b9fd-bc56a224c913","frontmatter":{"path":"/week5-old/2-hash-map","title":"Hash Map"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}