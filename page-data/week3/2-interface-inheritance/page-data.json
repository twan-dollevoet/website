{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week3/2-interface-inheritance","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You understand the concept of inheritance in the context of interfaces."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You are aware how inheritance relationships influence influence types and how references of a certain type can be used"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You understand the concept of subtype, supertype and the transitivity of these relationships"}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Introduction to inheritance"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Inheritance is a mechanism within the object-oriented programming paradigm that allows us to base an interface or class upon an existing interface or class and\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"expanding"}]},{"type":"text","value":" the behavior or implementation. When we define an "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"inheritance relationship"}]},{"type":"text","value":" between two classes or between two interfaces, there is usually\na "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"super"}]},{"type":"text","value":"-class or "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"super"}]},{"type":"text","value":"-interface from which the behavior/implementation is inherited by one or more "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"sub"}]},{"type":"text","value":"-class or "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"sub"}]},{"type":"text","value":"-interfaces. The type of the\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"sub"}]},{"type":"text","value":"-class or "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"sub"}]},{"type":"text","value":"-interface will be regarded a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"specialization"}]},{"type":"text","value":" of the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"super"}]},{"type":"text","value":" class or interface. This way we can reuse common behavior or implementations\nof classes or interfaces which helps us achieve "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"code reuse"}]},{"type":"text","value":", or create code where we can easily switch between different types of specialized behavior\nwhich helps us to achieve "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"polymorphism"}]},{"type":"text","value":" (similar to what we can achieve with interfaces).\nFor example, if you build a general "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Animal"}]},{"type":"text","value":" class and define their characteristics, you may want to build subclasses for specific animals later. For example, think of the classes "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Dog"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Horse"}]},{"type":"text","value":", etc.. These classes need all the characteristics from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Animal"}]},{"type":"text","value":", and may add some other, more specific, methods or characteristics of these animals. Code and implementations that are common to all animals can be put in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Animal"}]},{"type":"text","value":" class, while code and implementations that are specific to the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Dog"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Horse"}]},{"type":"text","value":" can be put in\nthose specific classes. Furthermore, objects of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Dog"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Horse"}]},{"type":"text","value":" can also be used in places where the more general "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Animal"}]},{"type":"text","value":" type is needed, which would allow us to create a simulation for general "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Animal"}]},{"type":"text","value":" objects, and run different experiments with the\nspecific behavior of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Dog"}]},{"type":"text","value":" objects or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Horse"}]},{"type":"text","value":" objects."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This week, you will learn more about inheritance. First we will discuss how inheritance works with interfaces, and then we move on to classes."}]},{"type":"element","tagName":"text-box","properties":{"variant":"hint","name":"Recap on polymorphism and interfaces"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can use interfaces to define behavior that's required from a class, i.e., its methods. Thus, interfaces are used to guarantee that an object has one or more methods available. Interfaces provide "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"polymorphism"}]},{"type":"text","value":" because we can write code that is able to handle objects of different classes, but which share a common interface type. This means that objects can take on multiple forms."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you do not remember the concepts of polymorphism and interfaces well enough, please reread the this topic in the material "},{"type":"element","tagName":"a","properties":{"href":"/website/week2/5-introduction-interfaces"},"children":[{"type":"text","value":"from last week"}]},{"type":"text","value":"."}]}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Interface inheritance"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In last weeks material, an interface was introduce to be able to compare the outcomes of certain types of casino games based on some score/value. The interface looked like this:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"interface"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getValue"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The interface could then be used in different classes: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"PokerHand"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BlackjackHand"}]},{"type":"text","value":", etc. Objects of those different classes could be sorted for analysis by a single sorting\nalgorithm that operated on the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" type, rather than having a separate function for each type. As an advantage, if we would introduce a new type of game, we can\napply the analysis that was created earlier as soon as it implements the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" interface."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the bank has an advantage in some types of games, we want to be able to detect whether a value was obtained by the bank or someone else. We could add a method "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"boolean fromBank();"}]},{"type":"text","value":" to the GameValue interface, but then all our classes would need to add a second method, while some of the games may not even have a bank. Note that we do not explicitly write that this method is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":", as interface methods cannot be private. You may write public, but please be consistent.\nWe could create a second interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" as follows:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"interface"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"fromBank"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, this approach gives us two separate types. On "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" objects we can only call "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getValue()"}]},{"type":"text","value":" and on "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" objects we can only call "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fromBank()"}]},{"type":"text","value":".\nIf the analysis information needs only one of the two pieces of information, this approach would work. However, if both pieces of information are needed, for\nexample because you need to compute the average outcome that where influenced by the staff of the casino, you would need both types."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As do not have a singly type where we can use both and we can choose only one type for (instance) variables and/or method and constructor arguments.\nOne idea could be to add "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int getValue()'"}]},{"type":"text","value":" to the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" interface:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"interface"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getValue"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"fromBank"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":" However, we can then still not use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" objects in our old sorting algorithm. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" is still a separate type from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To solve this problem, we let the interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" inherit the interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" with the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" keyword as follows:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"interface"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"fromBank"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, an "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"inheritance relationship"}]},{"type":"text","value":" between "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" is established and the type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" can be used as a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":"\nand classes that implement "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" must have both "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getValue()"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fromBank()"}]},{"type":"text","value":" methods, as the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getValue()"}]},{"type":"text","value":" method is inherited from\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We say that "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" is a "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"subtype"}]},{"type":"text","value":" of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" and that "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" is a "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"supertype"}]},{"type":"text","value":" of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":". A subtype can always do at least as much as its supertype. This terminology is based on "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"set theory"}]},{"type":"text","value":": the set of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" objects is a subset of the set of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" objects. The set of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GameValue"}]},{"type":"text","value":" objects is a superset of the set of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BankScore"}]},{"type":"text","value":" objects. Also supertype and subtype relations are "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"transitive"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To summarize, when we establish an "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"inheritance relationship"}]},{"type":"text","value":" between interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"A"}]},{"type":"text","value":" and interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"B"}]},{"type":"text","value":" with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"B extends A"}]},{"type":"text","value":" in the class header, the two following things happen:"}]},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"When a class implements interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"B"}]},{"type":"text","value":" it needs to implement "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"all"}]},{"type":"text","value":" methods that must be implemented when interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"A"}]},{"type":"text","value":" is implemented, and in addition the methods define in interface B must be implemented as well."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"B"}]},{"type":"text","value":" is considered as a specialization of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"A"}]},{"type":"text","value":", so references to objects of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"B"}]},{"type":"text","value":" can be assigned to variables of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"A"}]},{"type":"text","value":". However, there is "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"no"}]},{"type":"text","value":" guarantee that every object of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"A"}]},{"type":"text","value":" will also be an object of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"B"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"These relationships are "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"transitive"}]},{"type":"text","value":": if we have "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"B extends A"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"C extends B"}]},{"type":"text","value":", classes implementing "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"C"}]},{"type":"text","value":" need to implement all methods from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"A"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"B"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"C"}]},{"type":"text","value":", and object references of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"C"}]},{"type":"text","value":" can be assigned to variables of both type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"A"}]},{"type":"text","value":" and type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"B"}]},{"type":"text","value":"."}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You understand the concept of inheritance in the context of interfaces.</li>\n<li>You are aware how inheritance relationships influence influence types and how references of a certain type can be used</li>\n<li>You understand the concept of subtype, supertype and the transitivity of these relationships</li>\n</ul></text-box><h2>Introduction to inheritance</h2><p>Inheritance is a mechanism within the object-oriented programming paradigm that allows us to base an interface or class upon an existing interface or class and\n<em>expanding</em> the behavior or implementation. When we define an <em>inheritance relationship</em> between two classes or between two interfaces, there is usually\na <em>super</em>-class or <em>super</em>-interface from which the behavior/implementation is inherited by one or more <em>sub</em>-class or <em>sub</em>-interfaces. The type of the\n<em>sub</em>-class or <em>sub</em>-interface will be regarded a <em>specialization</em> of the <em>super</em> class or interface. This way we can reuse common behavior or implementations\nof classes or interfaces which helps us achieve <em>code reuse</em>, or create code where we can easily switch between different types of specialized behavior\nwhich helps us to achieve <em>polymorphism</em> (similar to what we can achieve with interfaces).\nFor example, if you build a general <code class=\"language-text\">Animal</code> class and define their characteristics, you may want to build subclasses for specific animals later. For example, think of the classes <code class=\"language-text\">Dog</code>, <code class=\"language-text\">Horse</code>, etc.. These classes need all the characteristics from <code class=\"language-text\">Animal</code>, and may add some other, more specific, methods or characteristics of these animals. Code and implementations that are common to all animals can be put in the <code class=\"language-text\">Animal</code> class, while code and implementations that are specific to the <code class=\"language-text\">Dog</code> and <code class=\"language-text\">Horse</code> can be put in\nthose specific classes. Furthermore, objects of type <code class=\"language-text\">Dog</code> or <code class=\"language-text\">Horse</code> can also be used in places where the more general <code class=\"language-text\">Animal</code> type is needed, which would allow us to create a simulation for general <code class=\"language-text\">Animal</code> objects, and run different experiments with the\nspecific behavior of <code class=\"language-text\">Dog</code> objects or <code class=\"language-text\">Horse</code> objects.</p><p>This week, you will learn more about inheritance. First we will discuss how inheritance works with interfaces, and then we move on to classes.</p><text-box variant='hint' name='Recap on polymorphism and interfaces'><p>We can use interfaces to define behavior that's required from a class, i.e., its methods. Thus, interfaces are used to guarantee that an object has one or more methods available. Interfaces provide <em>polymorphism</em> because we can write code that is able to handle objects of different classes, but which share a common interface type. This means that objects can take on multiple forms.</p><p>If you do not remember the concepts of polymorphism and interfaces well enough, please reread the this topic in the material <a href=\"/website/week2/5-introduction-interfaces\">from last week</a>.</p></text-box><h3>Interface inheritance</h3><p>In last weeks material, an interface was introduce to be able to compare the outcomes of certain types of casino games based on some score/value. The interface looked like this:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GameValue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>The interface could then be used in different classes: <code class=\"language-text\">PokerHand</code>, <code class=\"language-text\">BlackjackHand</code>, etc. Objects of those different classes could be sorted for analysis by a single sorting\nalgorithm that operated on the <code class=\"language-text\">GameValue</code> type, rather than having a separate function for each type. As an advantage, if we would introduce a new type of game, we can\napply the analysis that was created earlier as soon as it implements the <code class=\"language-text\">GameValue</code> interface.</p><p>Since the bank has an advantage in some types of games, we want to be able to detect whether a value was obtained by the bank or someone else. We could add a method <code class=\"language-text\">boolean fromBank();</code> to the GameValue interface, but then all our classes would need to add a second method, while some of the games may not even have a bank. Note that we do not explicitly write that this method is <code class=\"language-text\">public</code>, as interface methods cannot be private. You may write public, but please be consistent.\nWe could create a second interface <code class=\"language-text\">BankScore</code> as follows:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BankScore</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">fromBank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>However, this approach gives us two separate types. On <code class=\"language-text\">GameValue</code> objects we can only call <code class=\"language-text\">getValue()</code> and on <code class=\"language-text\">BankScore</code> objects we can only call <code class=\"language-text\">fromBank()</code>.\nIf the analysis information needs only one of the two pieces of information, this approach would work. However, if both pieces of information are needed, for\nexample because you need to compute the average outcome that where influenced by the staff of the casino, you would need both types.</p><p>As do not have a singly type where we can use both and we can choose only one type for (instance) variables and/or method and constructor arguments.\nOne idea could be to add <code class=\"language-text\">int getValue()&#39;</code> to the <code class=\"language-text\">BankScore</code> interface:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BankScore</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">fromBank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p> However, we can then still not use <code class=\"language-text\">BankScore</code> objects in our old sorting algorithm. <code class=\"language-text\">BankScore</code> is still a separate type from <code class=\"language-text\">GameValue</code>.</p><p>To solve this problem, we let the interface <code class=\"language-text\">BankScore</code> inherit the interface <code class=\"language-text\">GameValue</code> with the <code class=\"language-text\">extends</code> keyword as follows:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BankScore</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GameValue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">fromBank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>Now, an <em>inheritance relationship</em> between <code class=\"language-text\">GameValue</code> and <code class=\"language-text\">BankScore</code> is established and the type <code class=\"language-text\">BankScore</code> can be used as a <code class=\"language-text\">GameValue</code>\nand classes that implement <code class=\"language-text\">BankScore</code> must have both <code class=\"language-text\">getValue()</code> and <code class=\"language-text\">fromBank()</code> methods, as the <code class=\"language-text\">getValue()</code> method is inherited from\n<code class=\"language-text\">GameValue</code>.</p><p>We say that <code class=\"language-text\">BankScore</code> is a <strong>subtype</strong> of <code class=\"language-text\">GameValue</code> and that <code class=\"language-text\">GameValue</code> is a <strong>supertype</strong> of <code class=\"language-text\">BankScore</code>. A subtype can always do at least as much as its supertype. This terminology is based on <em>set theory</em>: the set of <code class=\"language-text\">BankScore</code> objects is a subset of the set of <code class=\"language-text\">GameValue</code> objects. The set of <code class=\"language-text\">GameValue</code> objects is a superset of the set of <code class=\"language-text\">BankScore</code> objects. Also supertype and subtype relations are <strong>transitive</strong>.</p><p>To summarize, when we establish an <em>inheritance relationship</em> between interface <code class=\"language-text\">A</code> and interface <code class=\"language-text\">B</code> with <code class=\"language-text\">B extends A</code> in the class header, the two following things happen:</p><ol>\n<li>When a class implements interface <code class=\"language-text\">B</code> it needs to implement <strong>all</strong> methods that must be implemented when interface <code class=\"language-text\">A</code> is implemented, and in addition the methods define in interface B must be implemented as well.</li>\n<li>The type <code class=\"language-text\">B</code> is considered as a specialization of the <code class=\"language-text\">A</code>, so references to objects of type <code class=\"language-text\">B</code> can be assigned to variables of type <code class=\"language-text\">A</code>. However, there is <strong>no</strong> guarantee that every object of type <code class=\"language-text\">A</code> will also be an object of type <code class=\"language-text\">B</code>.</li>\n</ol><p>These relationships are <em>transitive</em>: if we have <code class=\"language-text\">B extends A</code> and <code class=\"language-text\">C extends B</code>, classes implementing <code class=\"language-text\">C</code> need to implement all methods from <code class=\"language-text\">A</code>, <code class=\"language-text\">B</code> and <code class=\"language-text\">C</code>, and object references of type <code class=\"language-text\">C</code> can be assigned to variables of both type <code class=\"language-text\">A</code> and type <code class=\"language-text\">B</code>.</p></div>","frontmatter":{"path":"/week3/2-interface-inheritance","title":"Interface Inheritance","ready":true,"extra":null}},"allPages":{"edges":[{"node":{"id":"6dbbb07f-d2a4-5469-83d8-515ec4da7185","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"6dec76aa-fb95-55a4-9d97-c4511f548775","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"401064e0-a39d-550c-92fc-2ef92c6b6668","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"ff3dc30f-0280-5a9c-99ec-c4d2a9b9b9a9","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"a6f621ab-f293-5245-bac0-6f4f2f5556a6","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"a3aa3a67-9479-5974-abe1-6e88980da077","frontmatter":{"path":"/sessions-and-support-old","title":"Sessions and support (old)"}}},{"node":{"id":"336ac971-5566-5c22-a38a-4d4805142dbf","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"5ab906eb-59ec-5d6a-ba6f-c576ba14b3a4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"a1b5795f-40bc-5d04-a5f2-2ac62924c710","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"11f90931-1d19-5a42-a2a5-02076112da75","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"33e23016-f724-5015-8601-ca09c6d06cda","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"94e1d4f2-55f9-5fd6-9511-84057bec1152","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"4394a890-ac32-5276-aecd-6dcff67e87a0","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"2b7fbfb2-0a29-5ed0-8d42-c4cdb2d5fba8","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"58141db4-25a9-5676-a678-92fe0ec5fd30","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"796b5033-974c-5f34-9e3f-2eb8448b7c79","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"e6bcfe98-dbcc-56a1-b383-7b1e85674ef4","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"9f6b1395-1fc7-5409-b994-94c06695727d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"c4c94c91-7ec1-5959-8e12-82b069c5062f","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"db7f8fa4-bc60-55e3-b4e8-c625e56aecb4","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"f1ae2ab3-1c89-5965-a529-b9a9f444450b","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"cb772258-ee45-574c-b43c-7952b27dd32e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"5144895c-b0d1-59f6-becf-c5a8434f7c2e","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"62d53c71-3ba1-56b3-9bb2-7a7eb55f404d","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"8e88219b-5338-5b7f-bc7d-0db1d73fee7a","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"4c71eeec-43b0-5cbb-bec8-bf59808a8b15","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"52b17ec4-ae83-5f99-918f-e894cde2a6a2","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"cf5cd0c4-8c0f-57ee-b1e7-f59bff428d19","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"12827be8-8fe7-58e6-b46b-0fa06d195802","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"ed3a7bc0-edb6-5cb0-b297-88a7f1dea368","frontmatter":{"path":"/week1/4-intro-generic-types","title":"Introduction to Generic Types"}}},{"node":{"id":"4907fa1c-be35-5a8e-848b-9059033e6ebc","frontmatter":{"path":"/week1/5-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"245063b1-c9e0-55c6-967d-1df925248140","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"9f1af357-78d7-500b-bc53-06eb318b58f7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"636573de-0265-5502-b4d7-1c3aefdbf46e","frontmatter":{"path":"/week2/2-programming-errors","title":"Programming Errors"}}},{"node":{"id":"4ee53f59-04c4-5a8f-b1c2-e03205b67113","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"bec69199-b3e1-5c45-a9e9-a76487331db8","frontmatter":{"path":"/week2/4-reading-and-writing","title":"Reading and Writing Files"}}},{"node":{"id":"b731ee75-872e-52d4-a028-e7399bf14337","frontmatter":{"path":"/week2/3-exception-mechanism","title":"The Exception Mechanism"}}},{"node":{"id":"8949c5ff-ae4e-5bfa-80dd-8ef1a5138d37","frontmatter":{"path":"/week2/5-introduction-interfaces","title":"Introduction to Interfaces"}}},{"node":{"id":"1ec875a8-afc1-56f8-bd9a-fd03563fe2f5","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"ffab3aea-99aa-5ff8-8c28-18b59bea825f","frontmatter":{"path":"/week2/6-character encoding","title":"Background: Character Encodings"}}},{"node":{"id":"28e10a55-4736-5632-b85a-f3017376a3f8","frontmatter":{"path":"/week3/1-interface-types","title":"Interface Types"}}},{"node":{"id":"a515e9ea-a2a3-5f75-9194-7abcdf47defb","frontmatter":{"path":"/week3/2-interface-inheritance","title":"Interface Inheritance"}}},{"node":{"id":"3a78b0d2-83cb-5f17-a74f-9dedec7aa5c4","frontmatter":{"path":"/week3/3-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"5f608e8a-d814-52d5-b5ea-4356dfef6b9e","frontmatter":{"path":"/week3/4-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"8215c89f-1c64-5723-8343-f3af0df33725","frontmatter":{"path":"/week3/5-object-superclass","title":"Object, the Cosmic Superclass"}}},{"node":{"id":"98e55501-5f0e-55de-95d6-14c862229309","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"e98cd787-97b8-5887-82d6-e627ca876b75","frontmatter":{"path":"/week3/6-when-to-use-inheritance","title":"When to use inheritance"}}},{"node":{"id":"4995793c-414c-518e-a422-263f5f8886b5","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes"}}},{"node":{"id":"b3a32943-68b8-5031-ae05-3ba3a323f91b","frontmatter":{"path":"/week4/3-exception-class-hierarchy","title":"The Exception Class Hierarchy"}}},{"node":{"id":"780d2f69-ced9-5daa-a5fb-7e48c5a1a847","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class Hierarchies"}}},{"node":{"id":"4aaa128a-808e-5040-83df-dcd56ff13ee4","frontmatter":{"path":"/week4/4-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"4f500573-c057-5653-bb11-6c6df6eadc9e","frontmatter":{"path":"/week4/5-equals-and-hashcode","title":"Equals and Hashcode"}}},{"node":{"id":"a7e11d31-97be-5aa6-9630-47f4935076e7","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"6a111986-49df-5652-88b5-ad33638017ca","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"cc5206cc-6844-5675-84db-c7a3634fa148","frontmatter":{"path":"/week5/4-sets","title":"Sets"}}},{"node":{"id":"b48b340b-5b5b-5214-b2fd-917ce291c9d2","frontmatter":{"path":"/week5/5-maps","title":"Maps"}}},{"node":{"id":"320a9747-c2ce-5d30-8d35-f7c9c712a6fa","frontmatter":{"path":"/week5/6-collections-utilities","title":"Collection interfaces"}}},{"node":{"id":"2cb5a4bb-5a28-5a1e-b822-f73ccd81d477","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"c60f25f5-bfda-543a-9b93-edb95f1b0583","frontmatter":{"path":"/week5-old/1-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"e29e8b8e-aa25-5913-9601-76fc8ae45a03","frontmatter":{"path":"/week5-old/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"688cf690-c7fa-572a-90aa-8c12af7d3d96","frontmatter":{"path":"/week5-old/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"11c20e12-dae9-5bf3-9682-a21838433337","frontmatter":{"path":"/week5-old","title":"Week 5 Old"}}},{"node":{"id":"ea027db5-b6ed-50bb-a22a-f6081a454f82","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"27931c51-2e50-503b-b311-fe498e84f02c","frontmatter":{"path":"/week6/2-functional-interfaces","title":"Functional Interfaces"}}},{"node":{"id":"6b42bbad-743a-5b8e-bb0d-f7c5805b30df","frontmatter":{"path":"/week6/3-method-references","title":"Method References"}}},{"node":{"id":"05aaa8e9-73f9-5571-9da4-f96b4a3850d6","frontmatter":{"path":"/week6/5-data-processing-pipelines","title":"Data Processing Pipelines"}}},{"node":{"id":"7faf63ba-4322-5ed7-86ec-956b16f78bae","frontmatter":{"path":"/week6/4-default-methods","title":"Default methods and Shorter Comparators"}}},{"node":{"id":"df7960a5-e48d-55d4-acb3-bacf48ef44ce","frontmatter":{"path":"/week6/6-stream-intermediate","title":"Streams: Introduction and Intermediate Operations"}}},{"node":{"id":"98a86293-867b-5414-afff-f34cc855927f","frontmatter":{"path":"/week6/7-streams-terminal","title":"Streams: Terminal Operations"}}},{"node":{"id":"05a4cf2e-9825-5f42-a77f-6e1f86ec62a3","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"fb3d415c-1a50-5244-a7ad-23f3872d748b","frontmatter":{"path":"/week6/8-packages-libraries-maven","title":"Packages, Libraries and Maven"}}},{"node":{"id":"b7432b95-d07c-5e76-9f52-d7db9fb78e55","frontmatter":{"path":"/week6-old","title":"Week 6 (Old)"}}},{"node":{"id":"1729295f-a916-54cb-b51a-0af84e7829a4","frontmatter":{"path":"/week6-old/1-finnish-mooc","title":"Handling collections as streams and Libraries"}}},{"node":{"id":"4874b4b4-1db9-5bfd-b94b-f0d1941be2a2","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"87c7d5ea-3c02-5098-9335-02d2173a1077","frontmatter":{"path":"/week7/2-java-new-features","title":"Java: new Features"}}},{"node":{"id":"a85e084b-0064-5101-bfa7-7ad051a11f18","frontmatter":{"path":"/week7/3-other-languages","title":"Other languages"}}},{"node":{"id":"85e50f42-d57b-582f-acbe-a6f51ca97663","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"accc80ce-525c-537b-898c-318c69288680","frontmatter":{"path":"/week7/4-packages","title":"More on packages"}}},{"node":{"id":"911d4b52-6c3b-5567-b770-ff84f8886837","frontmatter":{"path":"/week7-old","title":"Week 7"}}},{"node":{"id":"87668dcd-5ef2-5dc6-bdf3-69b2551c597c","frontmatter":{"path":"/week7-old/1-data-visualization","title":"Data visualization"}}},{"node":{"id":"7a5afb48-878e-5a87-85f3-b23f5b9490f1","frontmatter":{"path":"/week4/6-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"95cb7d99-91c0-5f54-b22b-dc58890f7c96","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"c0770b58-809a-5f23-b9fd-bc56a224c913","frontmatter":{"path":"/week5-old/2-hash-map","title":"Hash Map"}}},{"node":{"id":"9012b897-db81-5e1e-9c03-db343323992a","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"6ea3497d-6e0a-5169-95d4-febed5b0330c","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}